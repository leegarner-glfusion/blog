<?php
//  $Id: Blog.class.php 9 2011-03-16 23:04:00Z root $
/**
*   @author     Lee P. Garner <lee AT leegarner DOT com>
*   @package    blog
*   @version    0.0.1
*   @copyright  Copyright &copy; 2011 Lee P. Garner
*   @license http://opensource.org/licenses/gpl-2.0.php
*           GNU General Public License v2
*   @filesource
*/

if (!defined ('GVERSION')) {
    die ('This file can not be used on its own.');
}

/**
*   Constants for stories:
*   Loading from database:
*/
define('BLOG_INVALID_SID', -6);
define('BLOG_PERMISSION_DENIED', -2);
define('BLOG_EDIT_DENIED', -3);
define('BLOG_LOADED_OK', 1);

/**
 * Constants for Stories:
 * Saving to database
 */
define('BLOG_SAVED', 1);
define('BLOG_SAVED_SUBMISSION', 2);

/**
 * Constants for Stories:
 * Loading from request.
 */
define('BLOG_DUPLICATE_SID', -1);
define('BLOG_EXISTING_NO_EDIT_PERMISSION', -2);
define('BLOG_NO_ACCESS_PARAMS', -3);
define('BLOG_EMPTY_REQUIRED_FIELDS', -4);
define('BLOG_NO_ACCESS_TOPIC', -5);

/**
  * Constants for our magic loader
*   @deprecated
  */
define('BLOG_AL_ALPHANUM', 0);
define('BLOG_AL_NUMERIC', 1);
define('BLOG_AL_CHECKBOX', 2);

class Blog
{
    //*************************************************************************/
    // Variables:

    // Public
    /**
     * Mode, either 'admin' for in the admin screens, or submission, for
     * when the user is using submit.php. Controls tons of stuff.
     */
    var $mode = 'admin';

    /**
     * Type of story. User submission or normal editor entered stuff.
     * Will be 'submission' if it's from the submission queue.
     */
    var $type = 'blog';

    //Private

    var $isAdmin;
    var $isNew;

    /**
     * PRIVATE MEMBER VARIABLES: Things that make up a story.
     */
    private $properties;


    /**
     * The original SID of the blog, cached incase it's changed:
     */
    var $_originalSid;

    /**
     * The access level.
     */
    var $_access;

    /**
     * Array of images uploaded for the story.
     */
    var $_storyImages;

    /**
    *   Record error status
    */
    var $error;

    //End Private

    // End Variables.
    /**************************************************************************/


    /**
     * Constructor, creates a story, taking a (glFusion) database object.
     * @param $mode   string    Story class mode, either 'admin' or 'submission'
     */
    function __construct($sid = '', $mode = 'admin')
    {
        global $_USER, $_BLOG_CONF;

        $this->isNew = true;
        $this->mode = $mode;
        //$this->isAdmin = SEC_hasRights('blog.admin') ? true : false;
        $this->isAdmin = SEC_hasRights('story.edit') ? true : false;
        $this->properties = array();
        if ($sid != '') {
            if (!$this->Read($sid)) {
                // Tried to load a non-existent blog.  Clear the sid
                // and set the error code for the caller to check
                $this->sid = '';
                $this->error = 1;
                $this->originalSid = $this->sid;
            } else {
                // Successful read
                $this->isNew = false;
            }
        } else {
            $this->owner_id = $_USER['uid'];
            $this->group_id = $_BLOG_CONF['def_group'];
            $this->sid = COM_makeSid();
            $this->date = date('Y-m-d');
            $this->hits = 0;
            $this->numemails = 0;
        }

    }


    /**
    *   Read an blog from the database
    *
    *   @param  string  $sid    Optional ID, current object ID used if empty
    *   @return boolean         True on success, False on failure (no such ID)
    */
    function Read($sid='')
    {
        global $_TABLES;

        if ($sid != '')
            $this->sid = $sid;

        $perms = $this->isAdmin ? '' : COM_getPermSQL('AND');
        $sql = "SELECT *, UNIX_TIMESTAMP(date) AS ux_date
                FROM {$_TABLES['blogs']}
                WHERE sid = '{$this->sid}' " . 
                $perms;
        //echo $sql;die;
        $result = DB_query($sql);
        $count = DB_numRows($result);

        if ($count != 1) {
            return false;
        }

        $A = DB_fetchArray($result, false);
        $this->setVars($A, true);
        return true;
    }


    /**
    *   Set the blog variables from the supplied array.
    *   The array may be from a form ($_POST) or database record.
    *
    *   @param  array   $A          Array of values
    *   @param  boolean $fromDB     True if reading from DB, false if from form
    */
    function setVars($A='', $fromDB=false)
    {
        global $_BLOG_CONF, $_CONF, $_USER;

        if (!is_array($A))
            return;

        if ($fromDB) {
            // Coming from the database.  Load all the values that are stored
            // differently in the database, or only exist there
            $this->perm_owner = (int)$A['perm_owner'];
            $this->perm_group = (int)$A['perm_group'];
            $this->perm_members = (int)$A['perm_members'];
            $this->perm_anon = (int)$A['perm_anon'];
            $this->hits = $A['hits'];
            $this->rating = $A['rating'];
            $this->votes = $A['votes'];
            $this->numemails = $A['numemails'];
            $this->comments = $A['comments'];
            $this->trackbacks = $A['trackbacks'];
            $this->related = $A['related'];
            $this->show_topic_icon = $A['show_topic_icon'];
            $this->advanced_editor_mode = $A['advanced_editor_mode'];
            $this->draft_flag = $A['draft_flag'];
            $this->frontpage = $A['frontpage'];
            $this->ux_date = $A['ux_date'];
            // TODO: if date picker is replaced, form var will be same as
            // database
            $this->date = $A['date'];
            $this->comment_expire = $A['comment_expire'];
        } else {
            // This is coming from a form. Some values are seen differently
            // in the $_POST array
            if (is_array($A['perm_owner']) ||
                is_array($A['perm_group']) ||
                is_array($A['perm_members']) ||
                is_array($A['perm_anon']) ) {
                list($this->perm_owner, $this->perm_group,
                    $this->perm_members,$this->perm_anon) = 
                    SEC_getPermissionValues($A['perm_owner'],$A['perm_group'],
                    $A['perm_members'], $A['perm_anon']);
            } else {
                list($this->perm_owner, $this->perm_group,
                    $this->perm_members,$this->perm_anon) = 
                    $_BLOG_CONF['default_permissions'];
            }

            $this->draft_flag = isset($A['draft_flag']) ? 1 : 0;
            $this->show_topic_icon = isset($A['show_topic_icon']) ? 1 : 0;
            $this->advanced_editor_mode = isset($A['advanced_editor_mode']) ?
                    1 : 0;
            $this->frontpage = isset($A['frontpage']) ? 1 : 0;
            if (empty($A['owner_id'])) $A['owner_id'] = $_USER['uid'];
            if (empty($A['group_id']))
                $A['group_id'] = SEC_getFeatureGroup('blog.edit', $_USER['uid']);
            if (empty($A['postmode'])) {
                $A['postmode'] = $_CONF['postmode'];
                if (!empty($A['content_type'])) {
                    if ($A['content_type'] == 'text') {
                        $A['postmode'] = 'text';
                    } elseif ($A['content_type'] == 'html' || 
                            $A['content_type'] == 'xhtml') {
                            $args['postmode'] = 'html';
                    }
                }
            }

            if (empty($A['tid']))
                $A['tid'] = $this->getTopic();

            // Set the dates
            $this->date = $this->_makeDate($A, 'publish');
            $this->comment_expire = $this->_makeDate($A, 'cmt_close');

        }

        // The rest of the values are the same whether in a form or the DB
        $this->uid = $A['uid'];
        $this->tid = $A['tid'];
        $this->title = $A['title'];
        $this->introtext = $A['introtext'];
        $this->bodytext = $A['bodytext'];
        $this->statuscode = $A['statuscode'];
        $this->featured = $A['featured'];
        $this->trackbackcode = $A['trackbackcode'];
        $this->commentcode = $A['commentcode'];
        $this->expire = $A['expire'];
        $this->postmode = $A['postmode'];
        $this->owner_id = $A['owner_id'];
        $this->group_id = $A['group_id'];

        if (isset($A['sid']) && !empty($A['sid'])) {
            $this->sid = $A['sid'];
        }
    }


    /**
    *   Magic function to set individual properties.
    *   Basic sanitization happens here, but they're not escaped for the DB.
    *   Only known properties are saved in the $properties array.
    *
    *   @param  string  $key    Name of the property
    *   @param  mixed   $value  Value to store
    */
    function __set($key, $value)
    {
        switch ($key) {
        case 'sid':
        case 'originalSid':
            // Blog ID value
            $this->properties[$key] = COM_sanitizeID($value);
            break;

        case 'uid':
        case 'hits':
        case 'votes':
        case 'numemails':
        case 'comments':
        case 'trackbacks':
        case 'statuscode':
        case 'featured':
        case 'commentcode':
        case 'trackbackcode':
        case 'advanced_editor_mode':
        case 'frontpage':
        case 'owner_id':
        case 'group_id':
        case 'perm_owner':
        case 'perm_group':
        case 'perm_members':
        case 'perm_anon':
        case 'error':
        case 'ux_date':
            // Integer values
            $this->properties[$key] = (int)$value;
            break;

        case 'draft_flag':
        case 'show_topic_icon':
            // Boolean values
            $this->properties[$key] = $value == 1 ? 1 : 0;
            break;

        case 'rating':
            // Floating-point values
            $this->properties[$key] = (float)$value;
            break;

        case 'tid':
        case 'date':
        case 'title':
        case 'introtext':
        case 'bodytext':
        case 'comment_expire':
        case 'related':
        case 'expire':
        case 'postmode':
            // Simple string values
            $this->properties[$key] = $value;
            break;
        }

    }


    /**
    *   Magic function to read a property.
    *
    *   @param  string  $key    Name of the property
    *   @return mixed           Value of the property, or NULL if nonexistent
    */
    function __get($key)
    {
        if (isset($this->properties[$key])) {
            return $this->properties[$key];
        } else {
            return NULL;
        }
    }

    function IncrEmails()
    {
        global $_TABLES;

        DB_query("UPDATE {$_TABLES['blogs']} 
                SET numemails = numemails + 1 
                WHERE sid = '".DB_escapeString($this->sid)."'");
    }

 
    /**
    *   Update the hit counter for this blog.
    *   Makes sure to only update the counter for non-draft, published blogs.
    */
    function UpdateHits()
    {
        global $_TABLES;

        DB_query("UPDATE {$_TABLES['blogs']} 
            SET hits = hits + 1 
            WHERE (sid = '" . DB_escapeString($this->sid) . "') 
            AND (date <= NOW()) 
            AND (draft_flag = 0)");
    }


    /**
    *   Create "What's Related" links for a story
    *
    *   Creates an HTML-formatted list of links to be used for the What's 
    *   Related block next to a story (in blog view).
    *
    *   @return   string              HTML-formatted list of links
    */
    function WhatsRelated()
    {
        global $_CONF, $_TABLES, $_USER, $LANG24, $_BLOG_CONF;

        // get the links from the story text
        if ($this->related != '') {
            $rel = explode ("\n", $this->related);
        } else {
            $rel = array ();
        }

        if (!COM_isAnonUser() || ($_CONF['loginrequired'] == 0 &&
                $_CONF['searchloginrequired'] == 0)) {
            $srchBaseUrl = $_CONF['site_url'] . 
                '/search.php?mode=search&amp;type=' . $_BLOG_CONF['pi_name'];
            // add a link to "search by author"
            if ($_CONF['contributedbyline'] == 1) {
                $author = COM_getDisplayName($this->uid);
                $rel[] = '<a href="' . $srchBaseUrl . '&amp;author=' .
                    $this->uid . '">' . $LANG24[37] . ' ' . $author . '</a>';
            }

            // add a link to "search by topic"
            $topic = DB_getItem($_TABLES['topics'], 'topic', 
                        "tid = '".DB_escapeString($this->tid)."'" );
            $rel[] = '<a href="' . $srchBaseUrl . '&amp;topic=' . 
                $this->tid . '">' . $LANG24[38] . ' ' . $topic . '</a>';
        }

        $related = '';
        if (sizeof($rel) > 0) {
            $related = COM_checkWords(COM_makeList($rel, 'list-whats-related'));
        }

        return ($related);
    }


    /**
     *  Check to see if there is any content in the story.
     *
     *  @return boolean     True if there's any content, False if empty
     */
    function hasContent()
    {
        if ($this->title != '' ||
            $this->introtext != '' ||
            $this->_bodytext != '') {
            return true;
        }

        return false;
    }


    /**
    *   Check the current user's access level.
    *   If a required access level is provided, then return true or false
    *   depending on whether the user has at least that level.
    *   If no requirement provided, return the actual access level of the user.
    *
    *   @param  integer $req    Minimum access level (optional)
    *   @return mixed           Boolean if a user meets the level, or the level
    */
    function checkAccess($req = -1)
    {
        $access = 0;

        if (SEC_hasRights('blog.edit')) {
            // Admin-level editor always has access
            $access = 3;
        } else {
            $access = SEC_hasAccess($this->owner_id, $this->group_id, 
                        $this->perm_owner, $this->perm_group,
                        $this->perm_members, $this->perm_anon);
        }

        if ($req > -1) {
            // Checking the access level
            return $access < $req ? false : true;
        } else {
            // Just retrieving the level
            return $access;
        }
    }


    /**
      * Loads a story object from an array (that's come back from the db..)
      *
      * Used from loadFromDatabase, and used on it's own from story list
      * pages.
      * @param  $story  array   Story array from db
      * @return nowt?
    *   @deprecated
      */
    function XloadFromArray($story)
    {
        /* Use the magic cheat array to quickly reload the whole story
         * from the database result array, doing the quick stripslashes.
         */
        reset($this->_dbFields);

        while (list($fieldname,$save) = each($this->_dbFields)) {
            $varname = '_' . $fieldname;

            if (array_key_exists($fieldname, $story)) {
                $this->{$varname}= $story[$fieldname];
            }
        }
        if (array_key_exists('username', $story)) {
            $this->_username = $story['username'];
        }
        if (array_key_exists('fullname', $story)) {
            $this->_fullname = $story['fullname'];
         }

        // Overwrite the date with the timestamp.
        $this->_date = $story['unixdate'];
        if (!empty($story['expireunix'])) {
            $this->_expire = $story['expireunix'];
        } else {
            $this->_expire = '0';
        }
        if (array_key_exists('cmt_expire_unix', $story)) {
            $this->_comment_expire = $story['cmt_expire_unix'];
        } else {
            $this->_comment_expire = 0;
        }

        // Store the original SID
        $this->_originalSid = $this->_sid;
    }

    /**
     * Load a Story object from the sid specified, returning a status result.
     * The result will either be a permission denied message, invalid SID
     * message, or a loaded ok message. If it's loaded ok, then we've got all
     * the exciting gubbins here.
     *
     * Only used from story admin and submit.php!
     *
    *   @deprecated
     * @param $sid  string  Story Identifier, valid glFusion story id from the db.
     * @return Integer from a constant.
     */
    function XloadFromDatabase($sid, $mode = 'edit')
    {
        global $_TABLES, $_CONF, $_USER, $_GROUPS;

        $sid = DB_escapeString(COM_applyFilter($sid));

        if (!empty($sid) && (($mode == 'edit') || ($mode == 'view') || ($mode == 'clone'))) {
            $sql = "SELECT STRAIGHT_JOIN 
                        s.*, 
                        UNIX_TIMESTAMP(s.date) AS unixdate, 
                        UNIX_TIMESTAMP(s.expire) as expireunix, 
                        UNIX_TIMESTAMP(s.comment_expire) as cmt_expire_unix, 
                        u.username, u.fullname, u.photo, u.email, 
                        t.topic, t.imageurl 
                    FROM 
                        {$_TABLES['blogs']} AS s, 
                        {$_TABLES['users']} AS u, 
                        {$_TABLES['topics']} AS t 
                    WHERE (s.uid = u.uid) 
                        AND (s.tid = t.tid) 
                        AND (sid = '$sid')";
        } elseif (!empty($sid) && ($mode == 'moderate')) {
            $sql = "SELECT STRAIGHT_JOIN 
                        s.*, 
                        UNIX_TIMESTAMP(s.date) AS unixdate, 
                        u.username, u.fullname, u.photo, u.email, 
                        t.topic, t.imageurl, t.group_id, 
                        t.perm_owner, t.perm_group, t.perm_members, t.perm_anon
                    FROM 
                        {$_TABLES['blog_submission']} AS s, 
                        {$_TABLES['users']} AS u, 
                        {$_TABLES['topics']} AS t 
                    WHERE (s.uid = u.uid)
                        AND (s.tid = t.tid) 
                        AND (sid = '$sid')";
        } elseif ($mode == 'edit') {
            $this->_sid = COM_makesid();
            $this->_old_sid = $this->_sid;

            if (isset($_CONF['draft_flag'])) {
                $this->_draft_flag = $_CONF['draft_flag'];
            } else {
                $this->_draft_flag = 0;
            }

            if (isset($_CONF['show_topic_icon'])) {
                $this->_show_topic_icon = $_CONF['show_topic_icon'];
            } else {
                $this->_show_topic_icon = 1;
            }

            if (COM_isAnonUser()) {
                $this->_uid = 1;
            } else {
                $this->_uid = $_USER['uid'];
            }
            $this->_date = time();
            $this->_expire = time();
            if ($_CONF['blog_comment_close_enabled']) {
                $this->_comment_expire = time() +
                    ($_CONF['blog_comment_close_days'] * 86400);
            } else {
                $this->_comment_expire = 0;
            }
            $this->_commentcode = $_CONF['comment_code'];
            $this->_trackbackcode = $_CONF['trackback_code'];
            $this->_title = '';
            $this->_introtext = '';
            $this->_bodytext = '';

            if (isset($_CONF['frontpage'])) {
                $this->_frontpage = $_CONF['frontpage'];
            } else {
                $this->_frontpage = 1;
            }

            $this->_hits = 0;
            $this->_rating = 0.00;
            $this->_votes = 0;
            $this->_comments = 0;
            $this->_trackbacks = 0;
            $this->_numemails = 0;

            if (isset($_CONF['advanced_editor']) && $_CONF['advanced_editor'] && ($_CONF['postmode'] != 'plaintext')) {
                $this->_advanced_editor_mode = 1;
                $this->_postmode = 'adveditor';
            } else {
                $this->_postmode = $_CONF['postmode'];
                $this->_advanced_editor_mode = 0;
            }

            $this->_statuscode = 0;
            $this->_featured = 0;
            if (COM_isAnonUser()) {
                $this->_owner_id = 1;
            } else {
                $this->_owner_id = $_USER['uid'];
            }

            if (isset($_GROUPS['Story Admin'])) {
                $this->_group_id = $_GROUPS['Story Admin'];
            } else {
                $this->_group_id = SEC_getFeatureGroup('story.edit');
            }

            $array = array();
            SEC_setDefaultPermissions($array, $_CONF['default_permissions_story']);
            $this->_perm_owner = $array['perm_owner'];
            $this->_perm_group = $array['perm_group'];
            $this->_perm_anon = $array['perm_anon'];
            $this->_perm_members = $array['perm_members'];
        } else {
            $this->loadFromArgsArray($_POST);
        }

        /* if we have SQL, load from it */
        if (!empty($sql)) {
            $result = DB_query($sql);

            if ($result) {
                $story = DB_fetchArray($result, false);
                if ($story == null) {
                    return BLOG_INVALID_SID;
                }
                $this->loadFromArray($story);
                if (!isset($story['owner_id'])) {
                    $story['owner_id'] = 1;
                }
                if ($this->isAdmin) {
                    $this->_access = 3;
                } else {
                    $access = SEC_hasAccess($story['owner_id'], $story['group_id'],
                                $story['perm_owner'], $story['perm_group'],
                                $story['perm_members'], $story['perm_anon']);

                    $this->_access = min($access, SEC_hasTopicAccess($this->_tid));
                }

                if ($this->_access == 0) {
                    return BLOG_PERMISSION_DENIED;
                } elseif ($this->_access == 2 && $mode != 'view') {
                    return BLOG_EDIT_DENIED;
                } elseif ((($this->_access == 2) && ($mode == 'view')) && (($this->_draft_flag == 1) || ($this->_date > time()))) {
                    return BLOG_INVALID_SID;
                }
            } else {
                return BLOG_INVALID_SID;
            }
        }

        if ($mode == 'moderate') {
            if (isset($_CONF['draft_flag'])) {
                $this->_draft_flag = $_CONF['draft_flag'];
            } else {
                $this->_draft_flag = 1;
            }

            if (isset($_CONF['show_topic_icon'])) {
                $this->_show_topic_icon = $_CONF['show_topic_icon'];
            } else {
                $this->_show_topic_icon = 1;
            }

            $this->_commentcode = $_CONF['comment_code'];
            $this->_trackbackcode = $_CONF['trackback_code'];
            $this->_featured = 0;
            $this->_expire = time();
            if ($_CONF['blog_comment_close_enabled']) {
                $this->_comment_expire = time() +
                    ($_CONF['blog_comment_close_days'] * 86400);
            } else {
                $this->_comment_expire = 0;
            }

            if (DB_getItem($_TABLES['topics'], 'archive_flag', "tid = '".DB_escapeString($this->_tid)."'") == 1) {
                $this->_frontpage = 0;
            } elseif (isset($_CONF['frontpage'])) {
                $this->_frontpage = $_CONF['frontpage'];
            } else {
                $this->_frontpage = 1;
            }

            $this->_comments = 0;
            $this->_trackbacks = 0;
            $this->_numemails = 0;
            $this->_statuscode = 0;
            $this->_owner_id = $this->_uid;
        } elseif ($mode == 'clone') {
            $this->_sid = COM_makesid();
            $this->_old_sid = $this->_sid;
            $this->_originalSid = '';
            if ( COM_isAnonUser() ) {
	        $this->_uid = 1;
	    } else {
                $this->_uid = $_USER['uid'];
	    }
            $this->_date = time();
            $this->_expire = time();

            // if the original story uses comment expire, update the time
            if ($this->_comment_expire != 0) {
                $this->_comment_expire = time() +
                    ($_CONF['blog_comment_close_days'] * 86400);
            }

            // reset counters
            $this->_hits = 0;
            $this->_rating = 0.00;
            $this->_votes = 0;
            $this->_comments = 0;
            $this->_trackbacks = 0;
            $this->_numemails = 0;
            $this->_owner_id = $_USER['uid'];
        }

        $this->_sanitizeData();
        return BLOG_LOADED_OK;
    }

    /**
     * Saves the story in it's final state to the database.
     *
     * Handles all the SID magic etc.
     * @return Integer status result from a constant list.
     */
    function XsaveToDatabase()
    {
        global $_TABLES;

        if (DB_getItem($_TABLES['topics'], 'tid', "archive_flag=1") == $this->_tid) {
            $this->_featured = 0;
            $this->_frontpage = 0;
            $this->_statuscode = BLOG_ARCHIVE_ON_EXPIRE;
        }

        if ( $this->_featured != 1 ) {
            $this->_featured = 0;
        }
        if ( $this->_statuscode == '' ) {
            $this->_statuscode = 0;
        }
        if ( $this->_owner_id == '' ) {
            $this->_owner_id = 1;
        }

        /* if a featured, non-draft, that goes live straight away, unfeature
         * other stories in same topic:
         */
        if ($this->_featured == '1') {
            // there can only be one non-draft featured story
            if ($this->_draft_flag == 0 AND $this->_date <= time()) {

                if ($this->_frontpage == 1) {
                    // un-feature any featured frontpage story
                    DB_query("UPDATE {$_TABLES['blogs']} SET featured = 0 WHERE featured = 1 AND draft_flag = 0 AND frontpage = 1 AND date <= NOW()");
                }

                // un-feature any featured story in the same topic
                DB_query("UPDATE {$_TABLES['blogs']} SET featured = 0 WHERE featured = 1 AND draft_flag = 0 AND tid = '{$this->_tid}' AND date <= NOW()");
            }
        }

        $oldBlogExists = false;
        $currentSidExists = false;

        /* Fix up old sid => new sid stuff */
        if ($this->_sid != $this->_originalSid) {
            /* The sid has changed. Load from request will have
             * ensured that if the new sid exists an error has
             * been thrown, but we need to know if the old sid
             * actually existed (as opposed to being a generated
             * sid that was then thrown away) to reduce the sheer
             * number of SQL queries we do.
             */
            $checksid = DB_escapeString($this->_originalSid);
            $newsid = DB_escapeString($this->_sid);

            $sql = "SELECT 1 FROM {$_TABLES['blogs']} WHERE sid='{$checksid}'";
            $result = DB_query($sql);

            if ($result && (DB_numRows($result) > 0)) {
                $oldBlogExists = true;
            }

            if ($oldBlogExists) {
                /* Move Comments */
                $sql = "UPDATE {$_TABLES['comments']} SET sid='$newsid' WHERE type='blog' AND sid='$checksid'";
                DB_query($sql);

                /* Move Images */
                $sql = "UPDATE {$_TABLES['article_images']} SET ai_sid = '{$newsid}' WHERE ai_sid = '{$checksid}'";
                DB_query($sql);

                /* Move trackbacks */
                $sql = "UPDATE {$_TABLES['trackback']} SET sid='{$newsid}' WHERE sid='{$checksid}' AND type='blog'";
                DB_query($sql);

                /* Move ratings */
                $sql = "UPDATE {$_TABLES['rating']} SET item_id='{$newsid}' WHERE item_id='{$checksid}' AND type='blog'";
                DB_query($sql);
                $sql = "UPDATE {$_TABLES['rating_votes']} SET item_id='{$newsid}' WHERE item_id='{$checksid}' AND type='blog'";
                DB_query($sql);

                CACHE_remove_instance('story_'.$this->_originalSid);
            }
        }

        /* Acquire Comment Count */
        $sql = "SELECT count(1) FROM {$_TABLES['comments']} WHERE type='blog' AND sid='".DB_escapeString($this->_sid)."'";
        $result = DB_query($sql);

        if ($result && (DB_numRows($result) == 1)) {
            $array = DB_fetchArray($result, false);
            $this->_comments = $array[0];
        } else {
            $this->_comments = 0;
        }

        /* Acquire Rating / Votes */
        list($rating_id, $rating, $votes) = RATING_getRating( 'blog', $this->_sid );
        $this->_rating = $rating;
        $this->_votes = $votes;

       /* Format dates for storage: */
        /*
         * Doing this here would use the webserver's timezone, but we need
         * to use the DB server's timezone so that ye olde timezone hack
         * still works. See use of FROM_UNIXTIME in the SQL below.
         *
         * $this->_date = date('Y-m-d H:i:s', $this->_date);
         * $this->_expire = date('Y-m-d H:i:s', $this->_expire);
         *
         */

        // Get the related URLs
        $this->_related = implode("\n", BLOG_extractLinks("{$this->_introtext} {$this->_bodytext}"));
        $sql = 'REPLACE INTO ' . $_TABLES['blogs'] . ' (';
        $values = ' VALUES (';
        $fields = '';
        reset($this->_dbFields);

        /* This uses the database field array to generate a SQL Statement. This
         * means that when adding new fields to save and load, all we need to do
         * is add the field name to the array, and the code will magically cope.
         */
        while (list($fieldname, $save) = each($this->_dbFields)) {
            if ($save === 1) {
                $varname = '_' . $fieldname;
                $sql .= $fieldname . ', ';
                if (($fieldname == 'date') || ($fieldname == 'expire') || ($fieldname == 'comment_expire')) {
                    // let the DB server do this conversion (cf. timezone hack)
                    if (!empty($this->{$varname})) {
                        $values .= 'FROM_UNIXTIME(' . $this->{$varname} . '), ';
                    } else {
                        $values .= "'0000-00-00 00:00:00', ";
                    }
                } else {
                    $values .= '\'' . DB_escapeString($this->{$varname}) . '\', ';
                }
            }
        }

        $sql = substr($sql, 0, strlen($sql) - 2);
        $values = substr($values, 0, strlen($values) - 2);
        $sql .= ') ' . $values . ')';

        DB_query($sql);
        CACHE_remove_instance('story_'.$this->_sid);

        /* Clean up the old story */
        if ($oldBlogExists && !empty($checksid)) {
            $sql = "DELETE FROM {$_TABLES['blogs']} WHERE sid='$checksid'";
            DB_query($sql);
            CACHE_remove_instance('story_'.$this->_originalSid);
        }
        if ( $this->type == 'submission' ) {
            if ( !empty($checksid) ) {
                DB_delete($_TABLES['blog_submission'], 'sid', $checksid);
            } else {
                DB_delete($_TABLES['blog_submission'], 'sid', DB_escapeString($this->_sid));
            }
        }

        CACHE_remove_instance('whatsnew');
        CACHE_remove_instance('stmenu');
        return BLOG_SAVED;
    }

    /**
     * Loads a story from the post data. This is the most exciting function in
     * the whole entire world. First it'll clean up that horrible Magic Quotes
     * crap. Then it'll do all glFusion's funky security stuff, anti XSS, anti
     * SQL Injection. Yay.
     */
    function XloadFromArgsArray(&$array)
    {
        global $_TABLES;

        $retval = BLOG_LOADED_OK;

        /* magic_quotes_gpc cleanup routine now in submitstory() in
         * /public_html/admin/story.php
         */

        /* Load the trivial stuff: */
        $this->_loadBasics($array);

        /* Check to see if we have permission to edit this sid, and that this
         * sid is not a duplicate or anything horrible like that. ewww.
         */
        $sql = "SELECT 
                    owner_id, group_id, perm_owner, perm_group, 
                    perm_members, perm_anon 
                FROM {$_TABLES['blogs']}
                WHERE sid='" . DB_escapeString($this->_sid) . "'";
        $result = DB_query($sql);

        if ($result && (DB_numRows($result) > 0)) {
            /* Sid exists! Is it our blog? */
            if ($this->_sid != $this->_originalSid) {
                $retval = BLOG_DUPLICATE_SID;
            } else {
                $blog = DB_fetchArray($result, false);
                /* Check Security */

                if ( SEC_hasRights('story.edit') ) {
                    $access = 3;
                } else {
                    $access = SEC_hasAccess($blog['owner_id'], $blog['group_id'], $blog['perm_owner'], $blog['perm_group'],
                                        $blog['perm_members'], $blog['perm_anon']);
                    $taccess = min($access, SEC_hasTopicAccess($this->_tid));
                    if ( $taccess < 3 ) {
                        return BLOG_EXISTING_NO_EDIT_PERMISSION;
                    }
                }
                if ( !empty($array['owner_id']) ) {
                    $this->_owner_id = $array['owner_id'];
                } else {
                    $this->_owner_id = $blog['owner_id'];
                }
            }
        }

        if (SEC_hasRights('story.edit')) {
            $access = 3;
        } else {
            $access = SEC_hasAccess($this->_owner_id, $this->_group_id, 
                        $this->_perm_owner, $this->_perm_group,
                        $this->_perm_members, $this->_perm_anon);

            if ($access < 3 || 
                    !SEC_hasTopicAccess($this->_tid) || 
                    !SEC_inGroup($this->_group_id)) {
                return BLOG_NO_ACCESS_PARAMS;
            }
        }

        /* Load up the topic name and icon */
        $topic = DB_query("SELECT topic, imageurl 
                    FROM {$_TABLES['topics']} 
                    WHERE tid='" . DB_escapeString($this->_tid) . "'");
        $topic = DB_fetchArray($topic, false);
        $this->_topic = $topic['topic'];
        $this->_imageurl = $topic['imageurl'];

        /* Then load the title, intro and body */
        if ($array['postmode'] == 'html' || 
                $array['postmode'] == 'adveditor' || 
                $array['postmode'] == 'wikitext') {
            $this->_htmlLoadStory($array['title'], $array['introtext'], 
                    $array['bodytext']);

            if ($this->_postmode == 'adveditor') {
                $this->_advanced_editor_mode = 1;
                $this->_postmode = 'html';
            } else {
                $this->_advanced_editor_mode = 0;
            }
        } else {
            $this->_advanced_editor_mode = 0;
            $this->_plainTextLoadStory($array['title'], $array['introtext'], $array['bodytext']);
        }

        if (empty($this->_title) || empty($this->_introtext)) {
            return BLOG_EMPTY_REQUIRED_FIELDS;
        }

        $this->_sanitizeData();
        return $retval;
    }

    /**
     * Sets up basic data for a new user submission story
     *
     * @param   string   Topic the user picked before heading to submission
     */
    function XinitSubmission($topic)
    {
        global $_USER, $_CONF, $_TABLES;

        if (COM_isAnonUser()) {
            $this->_uid = 1;
        } else {
            $this->_uid = $_USER['uid'];
        }

        $this->_postmode = $_CONF['postmode'];

        // If a topic has been specified, use it, if permitted
        // otherwise, fall back to the default permitted topic.
        // if we still don't have one...

        // Have we specified a permitted topic?
        if (!empty($topic)) {
            $allowed
            = DB_getItem($_TABLES['topics'], 'tid', "tid = '" . DB_escapeString($topic) . "'" . COM_getTopicSql('AND'));

            if ($allowed != $topic) {
                $topic = '';
            }
        }

        // Do we now not have a topic?
        if (empty($topic)) {
            // Get default permitted:
            $topic = DB_getItem($_TABLES['topics'], 'tid', 'is_default = 1' . 
                        COM_getPermSQL('AND'));
        }

        // Use what we have:
        $this->_tid = $topic;
        $this->_date = time();
    }

    /**
     * Loads a submitted story from postdata
     */
    function XloadSubmission()
    {
        global $_CONF;

        $array = $_POST;

        if ( count($_POST) == 0 ) {
            return;
        }

        $this->_expire = time();
        $this->_date = time();
        if ($_CONF['blog_comment_close_enabled']) {
            $this->_comment_expire = time() +
                ($_CONF['blog_comment_close_days'] * 86400);
        } else {
            $this->_comment_expire = 0;
        }

        // Handle Magic GPC Garbage:
        while (list($key, $value) = each($array)) {
            $array[$key] = COM_stripslashes($value);
        }

        if ( isset($array['postmode']) ) {
            $this->_postmode = COM_applyFilter($array['postmode']);
        } else {
            $this->_postmode = 'html';
        }
        $this->_sid = (isset($array['sid']) ? COM_applyFilter($array['sid']) : '');
        $this->_uid = (isset($array['uid']) ? COM_applyFilter($array['uid'], true) : 1);
        if ($this->_uid < 1) {
            $this->_uid = 1;
        }
        $this->_unixdate = (isset($array['date']) ? COM_applyFilter($array['date'], true) : time());

        if (!isset($array['bodytext'])) {
            $array['bodytext'] = '';
        }

        /* Then load the title, intro and body */
        if (($array['postmode'] == 'html') || ($array['postmode'] == 'adveditor')) {
            $this->_htmlLoadStory($array['title'], $array['introtext'], $array['bodytext']);

            if ($this->_postmode == 'adveditor') {
                $this->_advanced_editor_mode = 1;
                $this->_postmode = 'html';
            } else {
                $this->_advanced_editor_mode = 0;
            }
        } else {
            $this->_advanced_editor_mode = 0;
            $this->_plainTextLoadStory($array['title'], $array['introtext'], $array['bodytext']);
        }

        $this->_tid = COM_applyFilter($array['tid']);

        if (empty($this->_title) || empty($this->_introtext)) {
            return BLOG_EMPTY_REQUIRED_FIELDS;
        }

        return BLOG_LOADED_OK;
    }

    /**
     * Returns a story formatted for spam check:
     *
     * @return  string Story formatted for spam check.
     */
    function GetSpamCheckFormat()
    {
        return '<h1>' . $this->_title . '</h1><p>' .
            $this->_introtext . '</p><p>' . $this->_bodytext . '</p>';
    }

    /**
     * Saves a story submission.
     *
     * @return  integer result code explaining behaviour.
     */
    function XsaveSubmission()
    {
        global $_USER, $_CONF, $_TABLES;
        $this->_sid = COM_makeSid();

        if (COM_isAnonUser()) {
            $this->_uid = 1;
        } else {
            $this->_uid = $_USER['uid'];
        }

        $tmptid = DB_escapeString(COM_sanitizeID($this->_tid));

        $result = DB_query('SELECT group_id,perm_owner,perm_group,perm_members,perm_anon FROM ' .
                            "{$_TABLES['topics']} WHERE tid = '{$tmptid}'" .
                            COM_getTopicSQL('AND'));

        if (DB_numRows($result) == 0) {
            // user doesn't have access to this topic - bail
            return BLOG_NO_ACCESS_TOPIC;
        }

        $T = DB_fetchArray($result, false);

        if (($_CONF['storysubmission'] == 1) && !SEC_hasRights('story.submit')) {
            $this->_sid = DB_escapeString($this->_sid);
            $this->_tid = $tmptid;
            $this->_title = DB_escapeString($this->_title);
            $this->_introtext = DB_escapeString($this->_introtext);
            $this->_bodytext = DB_escapeString($this->_bodytext);
            $this->_postmode = DB_escapeString($this->_postmode);
            DB_save($_TABLES['blog_submission'], 'sid,tid,uid,title,introtext,bodytext,date,postmode',
                        "'{$this->_sid}','{$this->_tid}','".intval($this->_uid)."','{$this->_title}'," .
                        "'{$this->_introtext}','{$this->_bodytext}',NOW(),'{$this->_postmode}'");

            return BLOG_SAVED_SUBMISSION;
        } else {
            // post this story directly. First establish the necessary missing data.
            $this->_sanitizeData();

            if (!isset($_CONF['show_topic_icon'])) {
                $_CONF['show_topic_icon'] = 1;
            }

            if (DB_getItem($_TABLES['topics'], 'archive_flag', "tid = '{$tmptid}'") == 1) {
                $this->_frontpage = 0;
            } elseif (isset($_CONF['frontpage'])) {
                $this->_frontpage = $_CONF['frontpage'];
            } else {
                $this->_frontpage = 1;
            }

            $this->_oldsid = $this->_sid;
            $this->_date = mktime();
            $this->_featured = 0;
            $this->_commentcode = $_CONF['comment_code'];
            $this->_trackbackcode = $_CONF['trackback_code'];
            $this->_statuscode = 0;
            $this->_show_topic_icon = $_CONF['show_topic_icon'];
            if (COM_isAnonUser()) {
                $this->_owner_id = 1;
            } else {
                $this->_owner_id = $_USER['uid'];
            }
            $this->_group_id = $T['group_id'];
            $this->_perm_owner = $T['perm_owner'];
            $this->_perm_group = $T['perm_group'];
            $this->_perm_members = $T['perm_members'];
            $this->_perm_anon = $T['perm_anon'];

            $this->saveToDatabase();
            PLG_itemSaved($this->_sid, 'blog');

            COM_rdfUpToDateCheck();
            COM_olderStuff();

            return BLOG_SAVED;
        }
    }


    /**
     * Inserts image HTML into the place of Image Placeholders for stories
     * with images.
     *
     * @return array    containing errors, or empty.
     */
    function insertImages()
    {
        global $_CONF, $_TABLES, $LANG24;

        // Grab member vars into locals:
        $intro = $this->introtext;
        $body = $this->bodytext;
        $fulltext = "$intro $body";

        $result = DB_query("SELECT ai_filename 
                FROM {$_TABLES['article_images']} WHERE
                ai_sid = '{$this->sid}'
                ORDER BY ai_img_num");
        $nrows = DB_numRows($result);
        $errors = array();
        $stdImageLoc = true;

        if (!strstr($_CONF['path_images'], $_CONF['path_html'])) {
            $stdImageLoc = false;
        }

        for ($i = 1; $i <= $nrows; $i++) {
            $A = DB_fetchArray($result, false);

            $sizeattributes = COM_getImgSizeAttributes(
                    $_CONF['path_images'] . 'articles/' . $A['ai_filename']);

            $norm = '[image' . $i . ']';
            $left = '[image' . $i . '_left]';
            $right = '[image' . $i . '_right]';

            $unscalednorm = '[unscaled' . $i . ']';
            $unscaledleft = '[unscaled' . $i . '_left]';
            $unscaledright = '[unscaled' . $i . '_right]';

            // See how many times image $i is used in the fulltext of the blog:
            $icount = substr_count($fulltext, $norm) + 
                        substr_count($fulltext, $left) +
                        substr_count($fulltext, $right);
            // including unscaled.
            $icount += substr_count($fulltext, $unscalednorm) +
                        substr_count($fulltext, $unscaledleft) +
                        substr_count($fulltext, $unscaledright);

            // If the image we are currently looking at wasn't used, we need
            // to log an error
            if ($icount == 0) {
                // There is an image that wasn't used, create an error
                $errors[] = $LANG24[48] . 
                            " #$i, {$A['ai_filename']}, " . 
                            $LANG24[53];
            } else {
                // We had no errors, so this image and all previous images
                // are used, so we will then go and replace them
                if (count($errors) == 0) {

                    $imgpath = '';

                    // If we are storing images on a "standard path" i.e. is
                    // available to the host web server, then the url to this
                    // image is based on the path to images, site url, blogs
                    // folder and it's filename.
                    //
                    // Otherwise, we have to use the image handler to load the
                    // image from whereever else on the file system we're
                    // keeping them:
                    if ($stdImageLoc) {
                        $imgpath = substr($_CONF['path_images'], 
                                    strlen($_CONF['path_html']));
                        $imgSrc = $_CONF['site_url'] . '/' . $imgpath . 
                                    'articles/' . $A['ai_filename'];
                    } else {
                        $imgSrc = $_CONF['site_url'] . 
                                    '/getimage.php?mode=articles&amp;image=' . 
                                    $A['ai_filename'];
                    }

                    // Build image tags for each flavour of the image:
                    $img_noalign = '<img ' . $sizeattributes . 
                                'src="' . $imgSrc . '" alt=""' . XHTML . '>';
                    $img_leftalgn = '<img ' . $sizeattributes . 
                                'class="floatleft" src="' . $imgSrc . 
                                '" alt=""' . XHTML . '>';
                    $img_rightalgn = '<img ' . $sizeattributes . 
                                'class="floatright" src="' . $imgSrc . 
                                '" alt=""' . XHTML . '>';

                    // Are we keeping unscaled images?
                    if ($_CONF['keep_unscaled_image'] == 1) {
                        // Yes we are, so, we need to find out what the filename
                        // of the original, unscaled image is:
                        $lFilename_large = substr_replace($A['ai_filename'], 
                                    '_original.',
                                    strrpos($A['ai_filename'], '.'), 1);
                        $lFilename_large_complete = $_CONF['path_images'] . 
                                    'articles/' . $lFilename_large;

                        // We need to map that filename to the right location
                        // or the fetch script:
                        if ($stdImageLoc) {
                            $lFilename_large_URL = $_CONF['site_url'] . '/' . 
                                    $imgpath . 'articles/' . 
                                    $lFilename_large;
                        } else {
                            $lFilename_large_URL = $_CONF['site_url'] .
                                    '/getimage.php?mode=show&amp;image=' .
                                    $lFilename_large;
                        }

                        // And finally, replace the [imageX_mode] tags with the
                        // image and its hyperlink (only when the large image
                        // actually exists)
                        $lLink_url  = '';
                        $lLink_attr = '';
                        if (file_exists($lFilename_large_complete)) {
                            $lLink_url = $lFilename_large_URL;
                            $lLink_attr = array('title' => $LANG24[57]);
                        }
                    }

                    if (!empty($lLink_url)) {
                        $intro = str_replace($norm,  
                                COM_createLink($img_noalign, $lLink_url, 
                                    $lLink_attr), $intro);
                        $body  = str_replace($norm,
                                COM_createLink($img_noalign,
                                    $lLink_url, $lLink_attr), $body);
                        $intro = str_replace($left,
                                COM_createLink($img_leftalgn,
                                    $lLink_url, $lLink_attr), $intro);
                        $body  = str_replace($left,
                                COM_createLink($img_leftalgn,
                                    $lLink_url, $lLink_attr), $body);
                        $intro = str_replace($right,
                                COM_createLink($img_rightalgn, 
                                    $lLink_url, $lLink_attr), $intro);
                        $body  = str_replace($right,
                                COM_createLink($img_rightalgn,
                                    $lLink_url, $lLink_attr), $body);
                    } else {
                        // We aren't wrapping our image tags in hyperlinks, so
                        // just replace the [imagex_mode] tags with the image:
                        $intro = str_replace($norm,  $img_noalign,   $intro);
                        $body  = str_replace($norm,  $img_noalign,   $body);
                        $intro = str_replace($left,  $img_leftalgn,  $intro);
                        $body  = str_replace($left,  $img_leftalgn,  $body);
                        $intro = str_replace($right, $img_rightalgn, $intro);
                        $body  = str_replace($right, $img_rightalgn, $body);
                    }

                    // And insert the unscaled mode images:
                    if ($_CONF['allow_user_scaling'] == 1 && 
                            $_CONF['keep_unscaled_image'] == 1) {
                        if (file_exists($lFilename_large_complete)) {
                            $imgSrc = $lFilename_large_URL;
                            $sizeattributes = COM_getImgSizeAttributes(
                                        $lFilename_large_complete);
                        }

                        $intro = str_replace($unscalednorm, 
                                '<img ' . $sizeattributes . 'src="' .
                                $imgSrc . '" alt=""' . XHTML . '>', $intro);
                        $body  = str_replace($unscalednorm, 
                                '<img ' . $sizeattributes . 'src="' .
                                $imgSrc . '" alt=""' . XHTML . '>', $body);
                        $intro = str_replace($unscaledleft, 
                                '<img ' . $sizeattributes .
                                'align="left" src="' . $imgSrc . 
                                '" alt=""' . XHTML . '>', $intro);
                        $body  = str_replace($unscaledleft, 
                                '<img ' . $sizeattributes .
                                'align="left" src="' . $imgSrc . 
                                '" alt=""' . XHTML . '>', $body);
                        $intro = str_replace($unscaledright, 
                                '<img ' . $sizeattributes .
                                'align="right" src="' . $imgSrc. 
                                '" alt=""' . XHTML . '>', $intro);
                        $body  = str_replace($unscaledright, 
                                '<img ' . $sizeattributes .
                                'align="right" src="' . $imgSrc . 
                                '" alt=""' . XHTML . '>', $body);
                    }
                }
            }
        }

        $this->introtext = $intro;
        $this->bodytext  = $body;

        return $errors;
    }


    /**
     * This replaces all blog image HTML in intro and body with
     * GL special syntax
     *
     * @param    string      $sid    ID for story to parse
     * @param    string      $intro  Intro text
     * @param    string      $body   Body text
     * @return   string      processed text
     *
     */
    function replaceImages($text)
    {
        global $_CONF, $_TABLES, $LANG24;

        $stdImageLoc = true;

        if (!strstr($_CONF['path_images'], $_CONF['path_html'])) {
            $stdImageLoc = false;
        }

        $count = 0;
        // If we haven't already cached the images for this story, do so
        if (!is_array($this->_storyImages)) {
            $result= DB_query("SELECT ai_filename 
                        FROM {$_TABLES['article_images']}
                        WHERE ai_sid = '{$this->sid}'
                        ORDER BY ai_img_num");
            $nrows = DB_numRows($result);
            $this->_storyImages = array();

            for ($i = 1; $i <= $nrows; $i++) {
                $this->_storyImages[] = DB_fetchArray($result, false);
            }
            $count = $nrows;
        } else {
            $count = count($this->_storyImages);
        }

        // If the blog has any images, remove them back to [image] tags.
        for ($i = 0; $i < $count; $i++) {
            $A = $this->_storyImages[$i];

            $imageX = '[image' . ($i + 1) . ']';
            $imageX_left = '[image' . ($i + 1) . '_left]';
            $imageX_right = '[image' . ($i + 1) . '_right]';

            $sizeattributes = COM_getImgSizeAttributes($_CONF['path_images'] . 
                    'articles/' . $A['ai_filename']);

            $lLinkPrefix = '';
            $lLinkSuffix = '';

            if ($_CONF['keep_unscaled_image'] == 1) {
                $lFilename_large = substr_replace($A['ai_filename'],
                        '_original.', strrpos($A['ai_filename'], '.'), 1);
                $lFilename_large_complete = $_CONF['path_images'] . 
                        'articles/' . $lFilename_large;

                if ($stdImageLoc) {
                    $imgpath = substr($_CONF['path_images'], 
                            strlen($_CONF['path_html']));
                    $lFilename_large_URL = $_CONF['site_url'] . '/' . 
                            $imgpath . 'articles/' . $lFilename_large;
                } else {
                    $lFilename_large_URL = $_CONF['site_url'] . 
                            '/getimage.php?mode=show&amp;image=' .
                            $lFilename_large;
                }

                if (file_exists($lFilename_large_complete)) {
                    $lLinkPrefix = '<a href="' . $lFilename_large_URL . 
                            '" title="' . $LANG24[57] . '">';
                    $lLinkSuffix = '</a>';
                }
            }

            if ($stdImageLoc) {
                $imgpath = substr($_CONF['path_images'], 
                            strlen($_CONF['path_html']));
                $imgSrc = $_CONF['site_url'] . '/' . $imgpath . 'articles/' . 
                            $A['ai_filename'];
            } else {
                $imgSrc = $_CONF['site_url'] . 
                            '/getimage.php?mode=blogs&amp;image=' . 
                            $A['ai_filename'];
            }

            $norm = $lLinkPrefix . '<img ' . $sizeattributes . 
                        'src="' . $imgSrc . '" alt=""' . XHTML . '>' . 
                        $lLinkSuffix;
            $left = $lLinkPrefix . '<img ' . $sizeattributes . 
                        'class="floatleft" src="' . $imgSrc . 
                        '" alt=""' . XHTML . '>' .
                        $lLinkSuffix;
            $right = $lLinkPrefix . '<img ' . $sizeattributes . 
                        'class="floatright" src="' . $imgSrc . 
                        '" alt=""' . XHTML . '>' .
                        $lLinkSuffix;

            $text = str_replace($norm, $imageX, $text);
            $text = str_replace($left, $imageX_left, $text);
            $text = str_replace($right, $imageX_right, $text);

            if ($_CONF['allow_user_scaling'] == 1 && 
                    $_CONF['keep_unscaled_image'] == 1) {
                $unscaledX = '[unscaled' . ($i + 1) . ']';
                $unscaledX_left = '[unscaled' . ($i + 1) . '_left]';
                $unscaledX_right = '[unscaled' . ($i + 1) . '_right]';

                if (file_exists($lFilename_large_complete)) {
                    $sizeattributes = COM_getImgSizeAttributes(
                                $lFilename_large_complete);
                    $norm = '<img ' . $sizeattributes . 'src="' . 
                            $lFilename_large_URL . '" alt=""' . XHTML . '>';
                    $left = '<img ' . $sizeattributes . 'align="left" src="' . 
                            $lFilename_large_URL . '" alt=""' . XHTML . '>';
                    $right = '<img ' . $sizeattributes . 'align="right" src="' .
                            $lFilename_large_URL . '" alt=""' . XHTML . '>';
                }

                $text = str_replace($norm, $unscaledX, $text);
                $text = str_replace($left, $unscaledX_left, $text);
                $text = str_replace($right, $unscaledX_right, $text);
            }
        }

        return $text;
    }


    /**
     * Return the SID in a clean way
     *
     * @param $fordb    boolean True if we want an 'DB_escapeString' version for the db
     */
    function XgetSid($fordb = false)
    {
        if ($fordb) {
            return DB_escapeString($this->_sid);
        } else {
            return $this->_sid;
        }
    }

    /**
     * Get the access level
     */
    function XgetAccess()
    {
        return $this->_access;
    }

    /**
     * Provide access to story elements. For the editor.
     *
     * This is a pseudo-property, implementing a getter for story
     * details as if as an associative array. Personally, I'd
     * rather be able to assign getters and setters to actual
     * properties to mask controlled access to private member
     * variables. But, you get what you get with PHP. So here it
     * is in all its nastiness.
     *
     * @param   string  $item   Item to fetch.
     * @return  mixed   The clean and ready to use (in edit mode) value requested.
     */
    function XEditElements($item = 'title')
    {
        global $_CONF;
        switch (strtolower($item))
        {
        case 'unixdate':
            $return = strtotime($this->_date);

            break;

        case 'expirestamp':
            $return = strtotime($this->_expire);

            break;

        case 'publish_hour':
            $return = date('H', $this->_date);

            break;

        case 'publish_month':
            $return = date('m', $this->_date);

            break;

        case 'publish_day':
            $return = date('d', $this->_date);

            break;

        case 'publish_year':
            $return = date('Y', $this->_date);

            break;

        case 'public_hour':
            $return = date('H', $this->_date);

            break;

        case 'publish_minute':
            $return = date('i', $this->_date);

            break;

        case 'publish_second':
            $return = date('s', $this->_date);

            break;

        case 'expire_second':
            $return = date('s', $this->_expire);

            break;

        case 'expire_minute':
            $return = date('i', $this->_expire);

            break;

        case 'expire_hour':
            $return = date('H', $this->_expire);

            break;

        case 'expire_day':
            $return = date('d', $this->_expire);

            break;

        case 'expire_month':
            $return = date('m', $this->_expire);

            break;

        case 'expire_year':
            $return = date('Y', $this->_expire);

            break;
        case 'cmt_close':
            if (isset($this->_comment_expire) && $this->_comment_expire != 0) {
                $return = true;
            } else {
                $return = false;
                //return default expire time to form
                $this->_comment_expire = $this->_date + ($_CONF['blog_comment_close_days']*86400);
            }

            break;

        case 'cmt_close_second':
            if ($this->_comment_expire == 0) {
                $return = date('s', time() +
                               ($_CONF['blog_comment_close_days'] * 86400));
            } else {
                $return = date('s', $this->_comment_expire);
            }

            break;

        case 'cmt_close_minute':
            if ($this->_comment_expire == 0) {
                $return = date('i', time() +
                               ($_CONF['blog_comment_close_days'] * 86400));
            } else {
                $return = date('i', $this->_comment_expire);
            }

            break;

        case 'cmt_close_hour':
            if ($this->_comment_expire == 0) {
                $return = date('H', time() +
                               ($_CONF['blog_comment_close_days'] * 86400));
            } else {
                $return = date('H', $this->_comment_expire);
            }

            break;

        case 'cmt_close_day':
            if ($this->_comment_expire == 0) {
                $return = date('d', time() +
                               ($_CONF['blog_comment_close_days'] * 86400));
            } else {
                $return = date('d', $this->_comment_expire);
            }

            break;

        case 'cmt_close_month':
            if ($this->_comment_expire == 0) {
                $return = date('m', time() +
                               ($_CONF['blog_comment_close_days'] * 86400));
            } else {
                $return = date('m', $this->_comment_expire);
            }

            break;

        case 'cmt_close_year':
            if ($this->_comment_expire == 0) {
                $return = date('Y', time() +
                               ($_CONF['blog_comment_close_days'] * 86400));
            } else {
                $return = date('Y', $this->_comment_expire);
            }

            break;

        case 'title':
            $return = $this->_title; //htmlspecialchars($this->_title);

            break;

        case 'draft_flag':
            if (isset($this->_draft_flag) && ($this->_draft_flag == 1)) {
                $return = true;
            } else {
                $return = false;
            }

            break;

        case 'introtext':
            $return = $this->_editText($this->_introtext);

            break;

        case 'bodytext':
            $return = $this->_editText($this->_bodytext);

            break;

        default:
            $varname = '_' . $item;

            if (isset($this->{$varname})) {
                $return = $this->{$varname};
            } else {
                $return = '';
            }

            break;
        }

        return $return;
    }


    /**
    *   Provide access to blog elements for display.
    *
    *   @param  string  $item   Item to fetch.
    *   @return mixed       The clean and ready to use value requested.
    */
    function DisplayElements($item = 'title')
    {
        global $_CONF, $_TABLES;

        $return = '';

        switch (strtolower($item))
        {
        case 'introtext':
            if ($this->postmode == 'plaintext') {
                $return = nl2br($this->_introtext);
            } elseif ($this->postmode == 'wikitext') {
                $return = COM_renderWikiText($this->_editUnescape($this->introtext));
            } else {
                $return = $this->introtext;
            }

            $return = PLG_replaceTags($this->_displayEscape($return));
            break;

        case 'bodytext':
            $bodytext = $this->bodytext;
            if (!empty($bodytext)) {
                if ($this->postmode == 'plaintext') {
                    $return = nl2br($this->bodytext);
                } elseif ($this->postmode == 'wikitext') {
                    $return = COM_renderWikiText(
                            $this->_editUnescape($this->bodytext));
                } else {
                    $return = $this->_displayEscape($this->bodytext);
                }
                $return = PLG_replaceTags($return);
            } else {
                $return = '';
            }
            break;

        case 'title':
            $return = $this->_displayEscape($this->title);
            break;

        case 'shortdate':
            $return = strftime($_CONF['shortdate'], $this->date);
            break;

        case 'dateonly':
            $return = strftime($_CONF['dateonly'], $this->date);
            break;

        case 'date':
            $return = COM_getUserDateTimeFormat($this->date);
            $return = $return[0];
            break;

        case 'unixdate':
            $return = $this->date;
            break;

        case 'hits':
            $return = COM_NumberFormat($this->hits);
            break;
        case 'rating':
            $return = @number_format($this->rating, 2);
            break;

        case 'votes':
            $return = COM_NumberFormat($this->votes);
            break;
        case 'topic':
            $return = htmlspecialchars($this->topic);
            break;

        case 'expire':
            if (empty($this->expire)) {
                $return = time();
            } else {
                // Need to convert text date/time to a timestamp
                $return = explode(' ', $this->expire);
                $return = COM_convertDate2Timestamp($return[0], $return[1]);
            }
            break;

        case 'commentcode':
            // check to see if comment_time has passed
            if (    $this->comment_expire != 0 && 
                    time() > $this->comment_expire && 
                    $this->commentcode == 0 ) {
                $return = 1;
                //if comment code is not 1, change it to 1
                DB_query("UPDATE {$_TABLES['blogs']} 
                        SET commentcode = '1' 
                        WHERE sid = '{$this->sid}'");
            } else {
                $return = $this->commentcode;
            }
            break;

        default:
            $return = $this->{$item};
            break;
        }

        return $return;
    }


    /**
     * Set the TID to a new value.
     *
     * @param   $tid    int ID of the topic to set
     */
    function XsetTid($tid)
    {
        $this->_tid = $tid;
    }



    // End Public Methods.

    // Private Methods:

    /**
     * Escapes certain HTML for nicely encoded HTML.
     *
     * @access Private
     * @param   string     $in      Text to escpae
     * @return  string     escaped string
     */
    function _displayEscape($in)
    {
        return $in;
        $return = str_replace('$', '&#36;', $in);
        $return = str_replace('{', '&#123;', $return);
        $return = str_replace('}', '&#125;', $return);
        return $return;
    }

    /**
     * Unescapes certain HTML for editing again.
     *
     * @access Private
     * @param   string  $in Text escaped to unescape for editing
     * @return  string  Unescaped string
     */
    function _editUnescape($in)
    {
        if (($this->_postmode == 'html') || ($this->_postmode == 'wikitext')) {
            /* Raw and code blocks need entity decoding. Other areas do not.
             * otherwise, annoyingly, &lt; will end up as < on preview 1, on
             * preview 2 it'll be stripped by KSES. Can't beleive I missed that
             * in rewrite phase 1.
             *
             * First, raw
             */
            $inlower = MBYTE_strtolower($in);
            $buffer = $in;
            $start_pos = MBYTE_strpos($inlower, '[raw]');
            if( $start_pos !== false ) {
                $out = '';
                while( $start_pos !== false ) {
                    /* Copy in to start to out */
                    $out .= MBYTE_substr($buffer, 0, $start_pos);
                    /* Find end */
                    $end_pos = MBYTE_strpos($inlower, '[/raw]');
                    if( $end_pos !== false ) {
                        /* Encode body and append to out */
                        $encoded = html_entity_decode(MBYTE_substr($buffer, $start_pos, $end_pos - $start_pos));
                        $out .= $encoded . '[/raw]';
                        /* Nibble in */
                        $inlower = MBYTE_substr($inlower, $end_pos + 6);
                        $buffer = MBYTE_substr($buffer, $end_pos + 6);
                    } else { // missing [/raw]
                        // Treat the remainder as code, but this should have been
                        // checked prior to calling:
                        $out .= html_entity_decode(MBYTE_substr($buffer, $start_pos + 5));
                        $inlower = '';
                    }
                    $start_pos = MBYTE_strpos($inlower, '[raw]');
                }
                // Append remainder:
                if( $buffer != '' ) {
                    $out .= $buffer;
                }
                $in = $out;
            }
            /*
             * Then, code
             */
            $inlower = MBYTE_strtolower($in);
            $buffer = $in;
            $start_pos = MBYTE_strpos($inlower, '[code]');
            if( $start_pos !== false ) {
                $out = '';
                while( $start_pos !== false ) {
                    /* Copy in to start to out */
                    $out .= MBYTE_substr($buffer, 0, $start_pos);
                    /* Find end */
                    $end_pos = MBYTE_strpos($inlower, '[/code]');
                    if( $end_pos !== false ) {
                        /* Encode body and append to out */
                        $encoded = html_entity_decode(MBYTE_substr($buffer, $start_pos, $end_pos - $start_pos));
                        $out .= $encoded . '[/code]';
                        /* Nibble in */
                        $inlower = MBYTE_substr($inlower, $end_pos + 7);
                        $buffer = MBYTE_substr($buffer, $end_pos + 7);
                    } else { // missing [/code]
                        // Treat the remainder as code, but this should have been
                        // checked prior to calling:
                        $out .= html_entity_decode(MBYTE_substr($buffer, $start_pos + 6));
                        $inlower = '';
                    }
                    $start_pos = MBYTE_strpos($inlower, '[code]');
                }
                // Append remainder:
                if( $buffer != '' ) {
                    $out .= $buffer;
                }
                $in = $out;
            }
            return $in;
        } else {
            // advanced editor or plaintext can handle themselves...
            return $in;
        }
    }

    /**
     * Returns text ready for the edit fields.
     *
     * @access Private
     * @param   string  $in Text to prepare for editing
     * @return  string  Escaped String
     */
    function _editText($in)
    {
        $out = '';

        $out = $this->replaceImages($in);

        if ($this->_postmode == 'plaintext') {
            $out = COM_undoClickableLinks($out);
            $out = $this->_displayEscape($out);
        } elseif ($this->_postmode == 'wikitext') {
            $out = $this->_editUnescape($in);
        } else {
            // html
            $out = str_replace('<pre><code>', '[code]', $out);
            $out = str_replace('</code></pre>', '[/code]', $out);
            $out = str_replace('<!--raw--><span class="raw">', '[raw]', $out);
            $out = str_replace('</span><!--/raw-->', '[/raw]', $out);
            $out = $this->_editUnescape($out);
            $out = $this->_displayEscape(htmlspecialchars($out));
        }

        return $out;
    }

    /**
     * Loads the basic details of an blog into the internal
     * variables, cleaning them up nicely.
     * @access Private
     * @param $array Array of POST/GET data (by ref).
     * @return Nothing.
     */
    function X_loadBasics(&$array)
    {
        /* For the really, really basic stuff, we can very easily load them
         * based on an array that defines how to COM_applyFilter them.
         */
        foreach ($this->_postFields as $key => $value) {
            $vartype = $value[0];
            $varname = $value[1];

            // If we have a value
            if (array_key_exists($key, $array)) {
                // And it's alphanumeric or numeric, filter it and use it.
                if (($vartype == BLOG_AL_ALPHANUM) || ($vartype == BLOG_AL_NUMERIC)) {
                    $this->{$varname} = COM_applyFilter($array[$key], $vartype);
                } elseif (($array[$key] === 'on') || ($array[$key] === 1)) {
                    // If it's a checkbox that is on
                    $this->{$varname} = 1;
                } else {
                    // Otherwise, it must be a checkbox that is off:
                    $this->{$varname} = 0;
                }
            } elseif (($vartype == BLOG_AL_NUMERIC) || ($vartype == BLOG_AL_CHECKBOX)) {
                // If we don't have a value, and have a numeric or text box, default to 0
                $this->{$varname} = 0;
            }
        }

        // SID's are a special case:
        $sid = COM_sanitizeID($array['sid']);
        if (isset($array['old_sid'])) {
            $oldsid = COM_sanitizeID($array['old_sid'], false);
        } else {
            $oldsid = '';
        }

        if (empty($sid)) {
            $sid = $oldsid;
        }

        if (empty($sid)) {
            $sid = COM_makeSid();
        }

        $this->_sid = $sid;
        $this->_originalSid = $oldsid;

        /* Need to deal with the postdate and expiry date stuff */
        $publish_ampm = '';
        if (isset($array['publish_ampm'])) {
            $publish_ampm = COM_applyFilter($array['publish_ampm']);
        }
        $publish_hour = 0;
        if (isset($array['publish_hour'])) {
            $publish_hour = COM_applyFilter($array['publish_hour'], true);
        }
        $publish_minute = 0;
        if (isset($array['publish_minute'])) {
            $publish_minute = COM_applyFilter($array['publish_minute'], true);
        }
        $publish_second = 0;
        if (isset($array['publish_second'])) {
            $publish_second = COM_applyFilter($array['publish_second'], true);
        }

        if ($publish_ampm == 'pm') {
            if ($publish_hour < 12) {
                $publish_hour = $publish_hour + 12;
            }
        }

        if ($publish_ampm == 'am' AND $publish_hour == 12) {
            $publish_hour = '00';
        }

        $publish_year = 0;
        if (isset($array['publish_year'])) {
            $publish_year = COM_applyFilter($array['publish_year'], true);
        }
        $publish_month = 0;
        if (isset($array['publish_month'])) {
            $publish_month = COM_applyFilter($array['publish_month'], true);
        }
        $publish_day = 0;
        if (isset($array['publish_day'])) {
            $publish_day = COM_applyFilter($array['publish_day'], true);
        }
        $this->_date = strtotime(
                           "$publish_month/$publish_day/$publish_year $publish_hour:$publish_minute:$publish_second");

        $archiveflag = 0;

        if (isset($array['archiveflag'])) {
            $archiveflag = COM_applyFilter($array['archiveflag'], true);
        }
        /* Override status code if no archive flag is set: */
        if ($archiveflag != 1) {
            $this->_statuscode = 0;
        }

        if (array_key_exists('expire_ampm', $array)) {
            $expire_ampm = COM_applyFilter($array['expire_ampm']);
            $expire_hour = COM_applyFilter($array['expire_hour'], true);
            $expire_minute = COM_applyFilter($array['expire_minute'], true);
            $expire_second = COM_applyFilter($array['expire_second'], true);
            $expire_year = COM_applyFilter($array['expire_year'], true);
            $expire_month = COM_applyFilter($array['expire_month'], true);
            $expire_day = COM_applyFilter($array['expire_day'], true);

            if ($expire_ampm == 'pm') {
                if ($expire_hour < 12) {
                    $expire_hour = $expire_hour + 12;
                }
            }

            if ($expire_ampm == 'am' AND $expire_hour == 12) {
                $expire_hour = '00';
            }

            $expiredate
            = strtotime("$expire_month/$expire_day/$expire_year $expire_hour:$expire_minute:$expire_second");
        } else {
            $expiredate = time();
        }

        $this->_expire = $expiredate;

        //comment expire time
        if (isset($array['cmt_close_flag'])) {
            $cmt_close_ampm = COM_applyFilter($array['cmt_close_ampm']);
            $cmt_close_hour = COM_applyFilter($array['cmt_close_hour'], true);
            $cmt_close_minute = COM_applyFilter($array['cmt_close_minute'], true);
            $cmt_close_second = COM_applyFilter($array['cmt_close_second'], true);
            $cmt_close_year = COM_applyFilter($array['cmt_close_year'], true);
            $cmt_close_month = COM_applyFilter($array['cmt_close_month'], true);
            $cmt_close_day = COM_applyFilter($array['cmt_close_day'], true);

            if ($cmt_close_ampm == 'pm') {
                if ($cmt_close_hour < 12) {
                    $cmt_close_hour = $cmt_close_hour + 12;
                }
            }

            if ($cmt_close_ampm == 'am' AND $cmt_close_hour == 12) {
                $cmt_close_hour = '00';
            }

            $cmt_close_date
            = strtotime("$cmt_close_month/$cmt_close_day/$cmt_close_year $cmt_close_hour:$cmt_close_minute:$cmt_close_second");

            $this->_comment_expire = $cmt_close_date;
        } else {
            $this->_comment_expire = 0;
        }


        /* Then grab the permissions */

        // Convert array values to numeric permission values
        if (is_array($array['perm_owner']) || is_array($array['perm_group']) ||
                is_array($array['perm_members']) ||
                is_array($array['perm_anon'])) {

            list($this->_perm_owner, $this->_perm_group, $this->_perm_members, $this->_perm_anon) = SEC_getPermissionValues($array['perm_owner'], $array['perm_group'], $array['perm_members'], $array['perm_anon']);

        } else {
            $this->_perm_owner   = $array['perm_owner'];
            $this->_perm_group   = $array['perm_group'];
            $this->_perm_members = $array['perm_members'];
            $this->_perm_anon    = $array['perm_anon'];
        }
    }

    /**
     * This is the importantest bit. This function must load the title, intro
     * and body of the blog from the post array, providing all appropriate
     * conversions of HTML mode content into the nice safe form that glFusion
     * can then (simply) spit back out into the page on render. After doing a
     * magic tags replacement.
     *
     * This DOES NOT DB_escapeString! We do that on DB store, because we want to
     * keep our internal variables in "display mode", not in db mode or anything.
     *
     * @param $title    string  posttitle, only had stripslashes if necessary
     * @param $intro    string  introtext, only had stripslashes if necessary
     * @param $body     string   bodytext, only had stripslashes if necessary
     * @return nothing
     * @access private
     */
    function _htmlLoadStory($title, $intro, $body)
    {
        global $_CONF;

        // fix for bug in advanced editor
        if ($_CONF['advanced_editor'] && ($body == '<br' . XHTML . '>')) {
            $body = '';
        }

        $this->title = htmlspecialchars(strip_tags(COM_checkWords($title)));
        $this->introtext = COM_checkHTML(COM_checkWords($intro), 
                'blog.admin,blog.edit');
        $this->bodytext = COM_checkHTML(COM_checkWords($body), 
                'blog.admin,blog.edit');
    }


    /**
     * This is the second most importantest bit. This function must load the
     * title, intro and body of the blog from the post array, removing all
     * HTML mode content into the nice safe form that glFusion can then (simply)
     * spit back out into the page on render. After doing a magic tags
     * replacement. And nl2br.
     *
     * This DOES NOT DB_escapeString! We do that on DB store, because we want to
     * keep our internal variables in "display mode", not in db mode or anything.
     *
     * @param $title    string  posttitle, only had stripslashes if necessary
     * @param $intro    string  introtext, only had stripslashes if necessary
     * @param $body     string   bodytext, only had stripslashes if necessary
     * @return nothing
     * @access private
     */
    function _plainTextLoadStory($title, $intro, $body)
    {
        $this->_title = htmlspecialchars(strip_tags(COM_checkWords($title)));
        $this->_introtext = COM_makeClickableLinks(htmlspecialchars(COM_checkWords($intro)));
        $this->_bodytext = COM_makeClickableLinks(htmlspecialchars(COM_checkWords($body)));
    }

    /**
     * Perform some basic cleanups of data, dealing with empty required,
     * defaultable fields.
     */
    function _sanitizeData()
    {
        if (empty($this->properties['hits'])) {
            $this->hits = 0;
        }

        if (empty($this->properties['rating'])) {
            $this->rating = 0.00;
        }

        if (empty($this->properties['votes'])) {
            $this->votes = 0;
        }

        if (empty($this->properties['comments'])) {
            $this->comments = 0;
        }

        if (empty($this->_numemails)) {
            $this->_numemails = 0;
        }

        if (empty($this->_trackbacks)) {
            $this->_trackbacks = 0;
        }

        if ($this->_draft_flag === 'on') {
            $this->_draft_flag = 1;
        } elseif ($this->_draft_flag != 1) {
            $this->_draft_flag = 0;
        }

        if ($this->_show_topic_icon === 'on') {
            $this->_show_topic_icon = 1;
        } elseif ($this->_show_topic_icon != 1) {
            $this->_show_topic_icon = 0;
        }
    }


    /**
    *   Render the blog for display or printing
    *
    *   @param  integer $mode   Mode of display (preview, print, compact, full)
    *   @param  string  $query  Optional query text to highlight
    *   @param  string  $template   Optional template name
    *   @return string      HTML for rendered blog
    */
    public function Render($mode, $query = '', $disptype='display')
    {
        global $_CONF, $_BLOG_CONF, $_TABLES, $_USER, 
                $LANG01, $LANG05, $LANG11, $LANG_TRB,
                $_IMAGE_TYPE, $_GROUPS, $ratedIds;

        switch ($mode) {
        case BLOG_PRINT:
        case BLOG_EMAIL:
            $template = 'printable';
            break;
        case BLOG_COMPACT:
        case BLOG_FULL:
        default:
            if ($this->archive == 1) {
                $template = 'archive';
            } elseif ($this->featured == 1) {
                $template = 'featured';
            } else {
                $template = 'blog';
            }
            break;
        }
        $blog_filevar = $template;

        // Get the intro and body text formatted for display.
        // Just get the bodytext if it'll be used, to avoid replacing
        // tags and other overhead
        $introtext = $this->DisplayElements('introtext');
        if ($mode & (BLOG_FULL | BLOG_PRINT | BLOG_EMAIL)) {
            $bodytext = $this->DisplayElements('bodytext');
        } else {
            $bodytext = '';
        }

        if (!empty($query)) {
            $introtext = COM_highlightQuery($introtext, $query);
            $bodytext  = COM_highlightQuery($bodytext, $query);
        }

        $T = new Template(BLOG_PI_PATH . '/templates');
        $T -> set_file(array(
            'blog'              => $template . '.thtml',
            //'bodytext'          => 'bodytext.thtml',
            //'featuredblog'      => 'featured.thtml',
            //'featuredbodytext'  => 'featuredbody.thtml',
            //'archiveblog'       => 'archive.thtml',
            //'archivebodytext'   => 'archivebody.thtml'
            ) );

        if ($_CONF['hidestorydate'] != 1) {
            $T->set_var('story_date', $this->DisplayElements('date'),
                false, true);
        }
        $blogUrl = COM_buildURL(BLOG_URL . '/index.php?sid=' . $this->sid);

        $T->set_var(array(
            'blog_id'        => $this->sid,
            'blog_url'       => $blogUrl,
            'blog_title'     => $this->DisplayElements('title'),
        ) );

        // begin instance caching...
        /*if ($this->DisplayElements('featured') == 1) {
            $blog_filevar = 'featuredblog';
        } elseif ($this->statuscode == STORY_ARCHIVE_ON_EXPIRE && 
                $this->expire <= time() ) {
            $blog_filevar = 'archiveblog';
        } else {
            $blog_filevar = 'blog';
        }*/

        $hash = CACHE_security_hash();
        $instance_id = "blog_{$this->sid}_{$index}{$mode}'_{$blog_filevar}_{$hash}_{$_CONF['theme']}";

        if ($_CONF['contributedbyline'] == 1) {
            $fullname = $this->DisplayElements('fullname');
            $username = $this->DisplayElements('username');
            $T->set_var('contributedby_user', $username);
            if (empty($fullname)) {
                $T->set_var('contributedby_fullname', $username);
            } else {
                $T->set_var('contributedby_fullname',$fullname);
            }
            $authorname = COM_getDisplayName($this->uid, $username, $fullname);
            $T->set_var('author', $authorname);

            if( $this->uid > 1 ) {
                $profileUrl = $_CONF['site_url'] . 
                        '/users.php?mode=profile&amp;uid=' . $this->uid;
                $T->set_var('contributedby_url', $profileUrl);
                $authorname = COM_createLink($authorname, 
                        $profileUrl, 
                        array('class' => 'storybyline'));
            }
            $T->set_var('contributedby_author', $authorname);

            $photo = '';
            if ($_CONF['allow_user_photo'] == 1) {
                USES_lib_user();
                $authphoto = $this->photo;
                if (empty($authphoto)) {
                    $authphoto = '(none)'; // user does not have a photo
                }
                $photo = USER_getPhoto($this->uid, $authphoto,
                                       $this->DisplayElements('email'));
            }
            if (!empty($photo)) {
                $camera_icon = '<img src="' . $_CONF['layout_url']
                        . '/images/smallcamera.' . $_IMAGE_TYPE . '" alt=""'
                        . XHTML . '>';
                $T->set_var(array(
                        'contributedby_photo'   => $photo,
                        'author_photo'          => $photo,
                        'camera_icon' => 
                                COM_createLink($camera_icon, $profileUrl),
                ) );
            } else {
                $T->set_var(array(
                    'contributedby_photo'   => '',
                    'author_photo'          => '',
                    'camera_icon'           => '',
                ) );
            }
        }

        $tid = $this->DisplayElements('tid');
        $topicname = $this->DisplayElements('topic');
        $T->set_var('story_topic_id', $tid);
        $T->set_var('story_topic_name', $topicname);

        $topicurl = $_CONF['site_url'] . '/index.php?topic=' . $tid;
        if ( (!isset($_USER['noicons']) || $_USER['noicons'] != 1) &&
                $this->show_topic_icon == 1) {
            $imageurl = $this->DisplayElements('imageurl');
            if(!empty($imageurl)) {
                $imageurl = COM_getTopicImageUrl($imageurl);
                $T->set_var('story_topic_image_url', $imageurl );
                $topicimage = '<img src="' . $imageurl . '" class="float'
                            . $_CONF['blog_image_align'] . '" alt="'
                            . $topicname . '" title="' . $topicname . '"' . XHTML . '>';
                $T->set_var('story_anchortag_and_image',
                    COM_createLink(
                        $topicimage,
                        $topicurl,
                        array('rel'=>"category tag")
                    )
                );
                $T->set_var('story_topic_image', $topicimage );
                $topicimage_noalign = '<img src="' . $imageurl . '" alt="'
                            . $topicname . '" title="' . $topicname . '"' . XHTML . '>';
                $T->set_var('story_anchortag_and_image_no_align',
                    COM_createLink(
                        $topicimage_noalign,
                        $topicurl,
                        array('rel'=>"category tag")
                    )
                );
                $T->set_var('story_topic_image_no_align', $topicimage_noalign);
            }
        }
        $T->set_var('story_topic_url', $topicurl);

        $recent_post_anchortag = '';
        $T->set_var('lang_permalink', $LANG01[127]);

        $show_comments = true;

        // n = 'Compact display' for list of stories. p = 'Preview' mode.
        if ($mode & BLOG_COMPACT) {

            // Not used just get so we know whether to add "read more"
            $bodytext  = $this->bodytext;

            $attributes = ' class="non-ul"';
            $attr_array = array('class' => 'non-ul');
            if (!empty($query)) {
                $attributes .= ' rel="bookmark"';
                $attr_array['rel'] = 'bookmark';
            }
            $T->set_var('start_storylink_anchortag',
                              '<a href="' . $blogUrl . '"' . $attributes . '>');
            $T->set_var('end_storylink_anchortag', '</a>');
            $T->set_var('story_title_link',
                COM_createLink(
                        $this->DisplayElements('title'),
                        $blogUrl,
                        $attr_array
                )
            );
        } else {
            $T->set_var('story_title_link', $this->DisplayElements('title'));
        }

        if ($mode & (BLOG_FULL | BLOG_PREVIEW | BLOG_PRINT)) {

            if (empty($bodytext)) {
                $T->set_var('story_introtext', $introtext);
                $T->set_var('story_text_no_br', $introtext);
            } else {
                if ($_CONF['allow_page_breaks'] == 1 && $mode == BLOG_FULL) {
                    // page breaks only apply to displayed articles
                    $story_page = 1;
                    // page selector
                    if (is_numeric($mode)) {
                        $story_page = $mode;
                        if( $story_page <= 0 ) {
                            $story_page = 1;
                            $mode = 0;
                        } elseif( $story_page > 1 ) {
                            $introtext = '';
                        }
                    }
                    $blog_array = explode('[page_break]', $bodytext);
                    $pagelinks = COM_printPageNavigation(
                        $blogUrl, $story_page, count($blog_array),
                        'mode=', $_CONF['url_rewrite'], $LANG01[118]);
                    if (count($blog_array) > 1) {
                        $bodytext = $blog_array[$story_page - 1];
                    }
                    $T->set_var('page_selector', $pagelinks);

                    if ( ( $_CONF['page_break_comments'] == 'last' &&
                           $story_page < count($blog_array) )
                        ||
                         ( $_CONF['page_break_comments'] == 'first' &&
                           $story_page != 1 )
                    ) {
                        $show_comments = false;
                    }
                    $T->set_var('story_page', $story_page);
                }
                $T->set_var('story_introtext', $introtext . 
                                '<br ' . XHTML . '>' . $bodytext);
                $T->set_var('story_text_no_br', $introtext . $bodytext);
            }
            $T->set_var('story_introtext_only', $introtext);
            $T->set_var('story_bodytext_only', $bodytext );

            /*if ( ($_CONF['trackback_enabled'] || $_CONF['pingback_enabled']) &&
                    SEC_hasRights( 'story.ping') ) {
                $url = $_CONF['site_admin_url']
                     . '/trackback.php?mode=sendall&amp;id=' . $this->sid;
                $T->set_var('send_trackback_link',
                    COM_createLink($LANG_TRB['send_trackback'], $url)
                );
                $pingico = '<img src="' . $_CONF['layout_url'] . '/images/sendping.'
                    . $_IMAGE_TYPE . '" alt="' . $LANG_TRB['send_trackback']
                    . '" title="' . $LANG_TRB['send_trackback'] . '"' . XHTML . '>';
                $T->set_var('send_trackback_icon', 
                            COM_createLink($pingico, $url)
                );
                $T->set_var('send_trackback_url', $url);
                $T->set_var('lang_send_trackback_text',
                                   $LANG_TRB['send_trackback']);
            }*/
            $T->set_var('story_display',
                        $mode == BLOG_PREVIEW ? 'preview' : 'blog');
            $T->set_var('story_counter', 0);
        } else {
            $T->set_var('story_introtext', $introtext);
            $T->set_var('story_text_no_br', $introtext);
            $T->set_var('story_introtext_only', $introtext);

            if (!empty($bodytext)) {
                $numwords = COM_numberFormat(sizeof(explode(' ', 
                                    strip_tags($bodytext))));
                $T->set_var(array(
                    'lang_readmore'     => $LANG01[2],
                    'lang_readmore_words' => $LANG01[62],
                    'readmore_words'    => $numwords,
                    'readmore_link' => COM_createLink($LANG01[2], $blogUrl,
                                array('class'=>'blog-read-more-link')),
                                //" ($numwords {$LANG01[62]}) "),
                    // These are in case the admin wants to use a custom
                    // template
                    'start_readmore_anchortag' =>
                         '<a href="' . $blogUrl . 
                                    '" class="story-read-more-link">',
                    'end_readmore_anchortag'    => '</a>',
                    'read_more_class' => 'class="blog-read-more-link"',
                ) );
            }

            if ($this->commentcode >= 0  && $show_comments) {
                $commentsUrl = $blogUrl . '#comments';
                $T->set_var(array(
                    'comments_url'      => $commentsUrl,
                    'comments_text'     => COM_numberFormat(
                                $this->DisplayElements('comments')) . 
                                ' ' . $LANG01[3],
                    'comments_count'    => COM_numberFormat($this->comments),
                    'lang_comments'     => $LANG01[3],
                ) );
                $comments_with_count = sprintf($LANG01[121], 
                    COM_numberFormat($this->comments));

                if ($this->comments > 0 ) {
                    $result = DB_query("SELECT 
                            UNIX_TIMESTAMP(date) AS day, username, fullname,
                            c.uid as cuid 
                        FROM {$_TABLES['comments']} c,
                            {$_TABLES['users']} u
                        WHERE u.uid = c.uid 
                        AND c.sid = '" . DB_escapeString($this->sid) . "' 
                        ORDER BY date desc 
                        LIMIT 1");
                    $C = DB_fetchArray($result);

                    $recent_post_anchortag = '<span class="storybyline">'
                            . $LANG01[27] . ': '
                            . strftime( $_CONF['daytime'], $C['day'] ) . ' '
                            . $LANG01[104] . ' '
                            . COM_getDisplayName($C['cuid'],
                                    $C['username'], $C['fullname'])
                            . '</span>';
                    $T->set_var('comments_with_count', COM_createLink($comments_with_count, $commentsUrl));
                    $T->set_var('start_comments_anchortag', '<a href="'
                            . $commentsUrl . '">');
                    $T->set_var('end_comments_anchortag', '</a>');
                } else {
                    $T->set_var('comments_with_count', $comments_with_count);
                    $recent_post_anchortag = COM_createLink($LANG01[60],
                        $_CONF['site_url'] . '/comment.php?sid=' . $this->sid
                            . '&amp;pid=0&amp;type=blog');
                }

                if ($this->commentcode == 0 &&
                        ($_CONF['commentsloginrequired'] == 0 || 
                        !COM_isAnonUser())) {
                    $postCommentUrl = $_CONF['site_url'] . '/comment.php?sid='
                                . $this->sid . '&amp;pid=0&amp;type=' 
                                . $_BLOG_CONF['pi_name'] . '&amp;title='
                                . urlencode($this->title);
                    $T->set_var('post_comment_link',
                            COM_createLink($LANG01[60], $postCommentUrl,
                                           array('rel' => 'nofollow')));
                    $T->set_var('lang_post_comment', $LANG01[60]);
                    $T->set_var('start_post_comment_anchortag',
                                       '<a href="' . $postCommentUrl
                                       . '" rel="nofollow">');
                    $T->set_var('end_post_comment_anchortag', '</a>');
                }
            }

            /*if ( ($_CONF['trackback_enabled'] || $_CONF['pingback_enabled']) &&
                    $this->DisplayElements('trackbackcode') >= 0 &&
                    $show_comments ) {
                $num_trackbacks = COM_numberFormat($this->trackbacks);
                $trackbacksUrl = $blogUrl . '#trackback';
                $T->set_var('trackbacks_url', $trackbacksUrl );
                $T->set_var('trackbacks_text', $num_trackbacks . ' '
                                        . $LANG_TRB['trackbacks'] );
                $T->set_var('trackbacks_count', $num_trackbacks );
                $T->set_var('lang_trackbacks', $LANG_TRB['trackbacks'] );
                $T->set_var('trackbacks_with_count', COM_createLink(
                        sprintf($LANG01[122], $num_trackbacks),
                        $trackbacksUrl)
                );

                if (SEC_hasRights('story.ping')) {
                    $pingurl = $_CONF['site_admin_url']
                        . '/trackback.php?mode=sendall&amp;id=' . $this->sid;
                    $pingico = '<img src="' . $_CONF['layout_url'] . '/images/sendping.'
                        . $_IMAGE_TYPE . '" alt="' . $LANG_TRB['send_trackback']
                        . '" title="' . $LANG_TRB['send_trackback'] . '"' . XHTML . '>';
                    $T->set_var('send_trackback_icon',
                        COM_createLink($pingico, $pingurl)
                    );
                }

                if ($this->trackbacks > 0) {
                    $T->set_var('trackbacks_with_count',
                        COM_createLink(
                            sprintf($LANG01[122], $num_trackbacks),
                            $trackbacksUrl)
                    );
                } else {
                    $T->set_var('trackbacks_with_count',
                            sprintf($LANG01[122], $num_trackbacks)
                    );
                }
            }*/

            if ($_CONF['hideemailicon'] == 1 ||
                (COM_isAnonUser() && $_CONF['loginrequired'] == 1) ||
                $_CONF['emailstoryloginrequired'] == 1) {
                $T->set_var('email_icon', '');
            } else {
                $emailUrl = BLOG_URL . '/index.php?mode=emailblog&amp;sid=' .
                        $this->sid;
                $emailicon = '<img src="' . $_CONF['layout_url'] 
                    . '/images/mail.'
                    . $_IMAGE_TYPE . '" alt="' . $LANG01[64] . '" title="'
                    . $LANG11[2] . '"' . XHTML . '>';
                $T->set_var('email_icon',
                    COM_createLink($emailicon, $emailUrl)
                );
                $T->set_var('email_story_url', $emailUrl);
                $T->set_var('lang_email_story', $LANG11[2]);
                $T->set_var('lang_email_story_alt', $LANG01[64]);
            }

            if ($_CONF['hideprintericon'] == 0) {
                $printUrl = BLOG_URL . '/index.php?mode=print&amp;sid=' .
                            $this->sid;
                $printicon = '<img src="' . $_CONF['layout_url']
                    . '/images/print.' . $_IMAGE_TYPE . '" alt="' . $LANG01[65]
                    . '" title="' . $LANG11[3] . '" ' . XHTML . '>';
                $T->set_var('print_icon',
                    COM_createLink($printicon, $printUrl, 
                                array('rel' => 'nofollow',
                                    'target' => '_new'))
                );
                $T->set_var('print_story_url', $printUrl);
                $T->set_var('lang_print_story', $LANG11[3]);
                $T->set_var('lang_print_story_alt', $LANG01[65]);
            }
            $T->set_var('pdf_icon', '');

            if ($_CONF['backend'] == 1) {
                $result = DB_query("SELECT filename, title 
                        FROM {$_TABLES['syndication']} 
                        WHERE type = 'blog' 
                        AND topic = '" . DB_escapeString($this->tid) . "' 
                        AND is_enabled = 1");
                $feeds = DB_numRows($result);
                while ($A = DB_fetchArray($result, false)) {
                    list($filename, $title) = DB_fetchArray($result);
                    $feedUrl = SYND_getFeedUrl($A['filename']);
                    $feedTitle = sprintf($LANG11[6], $A['title']);
                }
                if ($feeds > 0) {
                    $feedicon = '<img src="'. $_CONF['layout_url'] . '/images/rss_small.'
                             . $_IMAGE_TYPE . '" alt="'. $feedTitle
                             .'" title="'. $feedTitle .'"' . XHTML . '>';
                    $T->set_var('feed_icon',
                                COM_createLink($feedicon, $feedUrl,
                                array("type" =>"application/rss+xml")));
                }
            }
            $T->set_var('story_display', 'index');

            $storycounter++;
            $T->set_var('story_counter', $storycounter);

        }

        $T->set_var('recent_post_anchortag', $recent_post_anchortag );

        $access = $this->checkAccess();
        $storyAccess = min($access, SEC_hasTopicAccess($this->tid));

        if ($storyAccess == 3 && 
                SEC_hasrights('story.edit') && 
                $mode != BLOG_PREVIEW) {
            $T->set_var('edit_link', COM_createLink($LANG01[4], 
                        BLOG_ADMIN_URL . '/index.php?edit=x&amp;sid=' . 
                        $this->sid)
                );
            $T->set_var('edit_url', $_CONF['site_admin_url']
                    . '/story.php?edit=x&amp;sid=' . $this->sid);
            $T->set_var('lang_edit_text',  $LANG01[4]);
            $editicon = $_CONF['layout_url'] . '/images/edit.' . $_IMAGE_TYPE;
            $editiconhtml = '<img src="' . $editicon . '" alt="' . $LANG01[4] . '" title="' . $LANG01[4] . '"' . XHTML . '>';
            $edit_url = $this->isAdmin ? 
                BLOG_ADMIN_URL . '/index.php?edit=x&amp;sid=' . $this->sid :
                BLOG_URL . '/index.php?mode=edit&amp;sid=' . $this->sid;
            $T->set_var('edit_icon', COM_createLink($editiconhtml, $edit_url));
            $T->set_var('edit_image', $editiconhtml);
        }

        PLG_templateSetVars($blog_filevar, $T);

        if ($_CONF['rating_enabled'] != 0 && $mode != BLOG_PREVIEW) {
            if (@in_array($this->sid, $ratedIds)) {
                $static = true;
                $voted = 1;
            } else {
                $static = 0;
                $voted = 0;
            }
            $uid = isset($_USER['uid']) ? $_USER['uid'] : 1;
            if ($_CONF['rating_enabled'] == 2 && $uid != $this->owner_id) {
                $T->set_var('rating_bar', RATING_ratingBar('blog',
                    $this->sid, $this->votes, $this->rating, 
                    $voted, 5, $static, 'sm'), false, true);
            } elseif (!COM_isAnonUser() && $uid != $T->owner_id) {
                $T->set_var('rating_bar', RATING_ratingBar('blog',
                    $this->sid, $this->votes, $this->rating,
                    $voted, 5, $static, 'sm'), false, true);
            } else {
                $T->set_var('rating_bar', RATING_ratingBar('blog',
                    $this->sid, $this->votes, $this->rating,
                    1, 5, TRUE, 'sm'), false, true);
            }
        } else {
            $T->set_var('rating_bar', '', false, true);

        }

        $T->parse('finalstory', 'blog');
        return $T->finish($T->get_var('finalstory'));

    }   // function Render()


    /**
    *   Get the date & time form options for a given time.
    *
    *   @param  string  $datetime   The date & time as YYYY-MM-DD hh:mm:ss
    *   @param  string  $ampm_varname   The variable name for the am/pm select
    *   @return array       Array of form fields
    */
    private function _getDateTimeOptions($datetime, $ampm_varname)
    {
        global $_CONF;

        $hour_mode = $_CONF['hour_mode'] == 12 ? 12 : 24;

        // Explode the given date & time into its components
        list($date, $time) = explode(' ', $datetime);
        list($year, $month, $day) = explode('-', $date);
        list($hour, $minute, $second) = explode(':', $time);
        $ampm = '';
        if ($hour_mode == 12) {
            if ($hour >= 12) {
                if ($hour > 12) {
                    $hour -= 12;
                }
                $ampm = 'pm';
            } else {
                $ampm = 'am';
            }
        }
        $ampm_select = COM_getAmPmFormSelection($ampm_varname, $ampm);
        if (empty($ampm_select)) {
            // have a hidden field to 24 hour mode to prevent JavaScript errors
            $ampm_select = '<input type="hidden" name="' . $ampm_varname . 
                    '" value=""' . XHTML . '>';
        }

        return array(
            'month_options'     => COM_getMonthFormOptions($month),
            'day_options'       => COM_getDayFormOptions($day),
            'year_options'      => COM_getYearFormOptions($year),
            'hour_options'      => COM_getHourFormOptions($hour, $hour_mode),
            'minute_options'    => COM_getMinuteFormOptions($minute),
            'ampm_options'      => $ampm_select,
        );
    }


    private function _makeDate($A, $v)
    {
        global $_CONF;

        $dt = $A[$v . '_year'] . $A[$v . '_month'] . $A[$v . '_day'];

        $hour = (int)$A[$v . '_hour'];
        if ($_CONF['hour_mode'] == 12 && isset($A[$v . '_ampm']) &&
            $A[$v . '_ampm'] == 'pm') {
            $hour += 12;
            if ($hour > 23) $hour = 12;
        }
        
        $datetime = sprintf('%d-%02d-%02d %02d:%02d:%02d',
            (int)$A[$v . '_year'], (int)$A[$v . '_month'], (int)$A[$v . '_day'],
            $hour, (int)$A[$v . '_minute'], (int)$A[$v . '_second']);
        return $datetime;
        
    }


    /**
    *   Provide the blog editor
    *
    *   @return string  HTML for the editor form
    */
    function Edit($action = 'edit')
    {
        global $_CONF, $_BLOG_CONF, $LANG_BLOG, $LANG24, $LANG_ADMIN,
            $_TABLES, $_USER;

        $retval = '';
        $saveoption = $action;  // good for most actions

        switch ($action) {
        case 'edit':
        case 'clone' :
        case 'preview':
            $title = $LANG24[5];
            $lang_saveoption = $LANG_ADMIN['save'];
            $submission = false;
            $saveoption = 'save';
            break;
        case 'moderate':
            $title = $LANG24[90];
            $lang_saveoption = $LANG_ADMIN['moderate'];
            $submission = true;
            break;
        case 'draft':
            $title = $LANG24[91];
            $lang_saveoption = $LANG_ADMIN['save'];
            $submission = true;
            $action = 'edit';
            break;
        default :
            $title = $LANG24[5];
            $lang_saveoption = $LANG_ADMIN['save'];
            $saveoption = 'save';
            $submission = false;
            $action = 'edit';
            break;
        }

        if (!isset($_CONF['hour_mode'])) {
            $_CONF['hour_mode'] = 12;
        }

        /*if (!empty ($errormsg)) {
            $display .= COM_startBlock($LANG24[25], '',
                                COM_getBlockTemplate ('_msg_block', 'header'));
            $display .= $errormsg;
            $display .= COM_endBlock (COM_getBlockTemplate ('_msg_block', 'footer'));
        }*/

        if (!empty($currenttopic)) {
            $allowed = DB_getItem ($_TABLES['topics'], 'tid',
                        "tid = '" . DB_escapeString ($currenttopic) . "'" .
                                COM_getTopicSql ('AND'));

            if ($allowed != $currenttopic) {
                $currenttopic = '';
            }
        }

        /*if ($this->mode == 'preview') {
            $result = $story->loadFromArgsArray($_POST);
        } else {
            $result = $story->loadFromDatabase($sid, $action);
        }*/

        if (empty($currenttopic) && $this->tid == '') {
            $this->tid = DB_getItem($_TABLES['topics'], 'tid',
                        'is_default = 1' . COM_getPermSQL ('AND'));
        } elseif ($this->tid == '') {
            $this->tid = $currenttopic;
        }

        if (SEC_hasRights('story.edit')) {
            $allowedTopicList = COM_topicList('tid,topic', $this->tid, 1, true, 0);
        } else {
            $allowedTopicList = COM_topicList('tid,topic', $this->tid, 1, true, 3);
        }
        if ($allowedTopicList == '') {
            $display .= COM_startBlock($LANG_ACCESS['accessdenied'], '',
                                COM_getBlockTemplate('_msg_block', 'header'));
            $display .= $LANG24[42];
            $display .= COM_endBlock(COM_getBlockTemplate ('_msg_block', 'footer'));
            COM_accessLog("User {$_USER['username']} tried to illegally access story $sid. No allowed topics.");
            return $display;
        }

        $T = new Template(BLOG_PI_PATH . '/templates');
        if (isset($_CONF['advanced_editor']) && $_CONF['advanced_editor'] == 1) {
            $advanced_editormode = true;
            USES_class_navbar();
            $T->set_file(array('editor' => 'editor_advanced.thtml'));
            if (file_exists($_CONF['path_layout'] . '/fckstyles.xml')) {
                $T->set_var('glfusionStyleBasePath', $_CONF['layout_url']);
            } else {
                $T->set_var('glfusionStyleBasePath', 
                        $_CONF['site_url'] . '/fckeditor');
            }
            $T->set_var(array(
                'change_editormode'     => 'onchange="change_editmode(this);"',
                'show_preview'          => 'none',
                'lang_expandhelp'       => $LANG24[67],
                'lang_reducehelp'       => $LANG24[68],
                'lang_publishdate'      => $LANG24[69],
                'lang_toolbar'          => $LANG24[70],
                'toolbar1'              => $LANG24[71],
                'toolbar2'              => $LANG24[72],
                'toolbar3'              => $LANG24[73],
                'toolbar4'              => $LANG24[74],
                'toolbar5'              => $LANG24[75],
            ) );

            if ($this->advanced_editor_mode == 1 || 
                    $this->postmode == 'adveditor') {
                $T->set_var(array(
                    'show_texteditor'   => 'none',
                    'show_htmleditor'   => '',
                ) );
            } else {
                $T->set_var(array(
                    'show_texteditor'   => '',
                    'show_htmleditor'   => 'none',
                ) );
            }

        } else {
            // Not using the advanced editor
            $T->set_file(array('editor' => 'editor.thtml'));
            $advanced_editormode = false;
        }

        if ($this->hasContent()) {
            $previewContent = $this->Render(BLOG_PREVIEW);
            if ($advanced_editormode && $previewContent != '') {
                $T->set_var('preview_content', $previewContent);
            } elseif ($previewContent != '') {
                $display = COM_startBlock($LANG24[26], '',
                                COM_getBlockTemplate('_admin_block', 'header'));
                $display .= $previewContent;
                $display .= COM_endBlock(COM_getBlockTemplate('_admin_block', 'footer'));
            }
        }

        if ($advanced_editormode) {
            // Set up the navigation bar.  Only used if advanced_editor is on
            $navbar = new navbar;
            $i = 0;
            if (!empty($previewContent)) {
                $navbar->add_menuitem($LANG24[79],
                    'showhideEditorDiv("preview",'.$i++.');return false;',true);
            }
            $navbar->add_menuitem($LANG24[80],
                    'showhideEditorDiv("editor",'.$i++.');return false;',true);
            $navbar->add_menuitem($LANG24[81],
                    'showhideEditorDiv("publish",'.$i++.');return false;',true);
            $navbar->add_menuitem($LANG24[82],
                    'showhideEditorDiv("images",'.$i++.');return false;',true);
            $navbar->add_menuitem($LANG24[83],
                    'showhideEditorDiv("archive",'.$i++.');return false;',true);
            $navbar->add_menuitem($LANG24[84],
                    'showhideEditorDiv("perms",'.$i++.');return false;',true);
            $navbar->add_menuitem($LANG24[85],
                    'showhideEditorDiv("all",'.$i++.');return false;',true);

            if ($action == 'preview') {
                // Make the "preview" tab active
                $T->set_var(array(
                    'show_preview'      => '',
                    'show_htmleditor'   => 'none',
                    'show_texteditor'   => 'none',
                    'show_submitoptions' => 'none',
                ) );
                $navbar->set_selected($LANG24[79]);
            } else {
                $navbar->set_selected($LANG24[80]);
            }
            $T->set_var('navbar', $navbar->generate());
        }

        // start generating the story editor block
        //$display .= COM_startBlock ($title, '',
        //                COM_getBlockTemplate ('_admin_block', 'header'));
        $oldsid = $this->originalSid;
        if (!empty($oldsid)) {
            $delbutton = '<input type="submit" value="' . $LANG_ADMIN['delete']
                   . '" name="deletestory"%s' . XHTML . '>';
            $jsconfirm = ' onclick="return confirm(\'' . $MESSAGE[76] . '\');"';
            $T->set_var('delete_option', sprintf ($delbutton, $jsconfirm));
            $T->set_var('delete_option_no_confirmation', sprintf ($delbutton, ''));
        }
        if ($submission || ($this->type == 'submission')) {
            $story_templates->set_var ('submission_option',
                    '<input type="hidden" name="type" value="submission"' . XHTML . '>');
        }

        $storyauthor = COM_getDisplayName($this->uid);
        $storyauthor_select= COM_optionList($_TABLES['users'], 'uid,username',
                        $this->uid);
        $ownername = COM_getDisplayName($this->owner_id);

        $pub_opt = $this->_getDateTimeOptions($this->date, 'ampm');
        /*list($pub_date, $pub_time) = explode(' ', $this->date);
        list($pub_year, $pub_month, $pub_day) = explode('-', $pub_date);
        list($pub_hour, $pub_minute, $pub_second) = explode(':', $pub_time);
        $pub_ampm = '';
        if ($_CONF['hour_mode'] == 12) {
            if ($pub_hour >= 12) {
                if ($pub_hour > 12) {
                    $pub_hour = $pub_hour - 12;
                }
                $pub_ampm = 'pm';
            } else {
                $pub_ampm = 'am';
            }
            $pub_hour_options = COM_getHourFormOptions($pub_hour, 12);
        } else {
            $pub_hour_options = COM_getHourFormOptions($pub_hour, 24);
        }*/

        $exp_opt = $this->_getDateTimeOptions($this->expire, 'expire_ampm');
        /*list($exp_date, $exp_time) = explode(' ', $this->expire);
        list($exp_year, $exp_month, $exp_day) = explode('-', $exp_date);
        list($exp_hour, $exp_minute, $exp_second) = explode(':', $exp_time);
        $exp_ampm = '';
        if ($_CONF['hour_mode'] == 12) {
            if ($expire_hour >= 12) {
                if ($expire_hour > 12) {
                    $expire_hour = $expire_hour - 12;
                }
                $exp_ampm = 'pm';
            } else {
                $exp_ampm = 'am';
            }
            $exp_hour_options = COM_getHourFormOptions($exp_hour, 12);
        } else {
            $exp_hour_options = COM_getHourFormOptions($exp_hour, 24);
        }
        $exp_ampm_select = COM_getAmPmFormSelection('expire_ampm', $exp_ampm);
        if (empty($exp_ampm_select)) {
            // have a hidden field to 24 hour mode to prevent JavaScript errors
            $exp_ampm_select = '<input type="hidden" name="expire_ampm" value=""' . XHTML . '>';
        }*/

        $cmt_opt = $this->_getDateTimeOptions($this->cmt_expire, 'cmt_close_ampm');
        /*list($cmt_date, $cmt_time) = explode(' ', $this->cmt_expire);
        list($cmt_year, $cmt_month, $cmt_day) = explode('-', $cmt_date);
        list($cmt_hour, $cmt_minute, $cmt_second) = explode(':', $cmt_time);
        $cmt_ampm = '';
        if ($_CONF['hour_mode'] == 12) {
            if ($cmt_hour >= 12) {
                if ($cmt_hour > 12) {
                    $cmt_hour = $cmt_hour - 12;
                }
                $cmt_ampm = 'pm';
            } else {
                $cmt_ampm = 'am';
            }
            $cmt_hour_options = COM_getHourFormOptions($cmt_hour, 12);
        } else {
            $cmt_hour_options = COM_getHourFormOptions($cmt_hour, 24);
        }
        $cmt_ampm_select = COM_getAmPmFormSelection('cmt_close_ampm', $cmt_ampm);
        if (empty($cmt_ampm_select)) {
            // have a hidden field to 24 hour mode to prevent JavaScript errors
            $cmt_ampm_select = '<input type="hidden" name="cmt_close_ampm" value=""' . XHTML . '>';
        }*/

        // Provide the "featured" selector if the user is allowed to feature
        // an blog.  Otherwise set the featured status off
        if ($this->isAdmin || $_CONF['onlyrootfeatures'] == 0) {
            $featured_options = "<select name=\"featured\">" . LB
                        . COM_optionList($_TABLES['featurecodes'], 'code,name',
                                $this->featured)
                        . "</select>" . LB;
        } else {
            $featured_options = "<input type=\"hidden\" name=\"featured\" value=\"0\"" . XHTML . ">";
        }

        $post_options = COM_optionList($_TABLES['postmodes'], 'code,name',
                        $this->postmode);
        if ($_CONF['advanced_editor'] == 1) {
            $sel = $this->advanced_editor_mode == 1 || 
                    $this->postmode == 'adveditor' ? BLOG_SELECTED : '';
            $post_options .= '<option value="adveditor" ' . $sel . '>' .
                    $LANG24[86].'</option>';
        }

        if ($_CONF['wikitext_editor']) {
            $sel = $this->postmode == 'wikitext' ? BLOG_SELECTED : '';
            $post_options .= '<option value="wikitext" ' . $sel . '>' .
                    $LANG24[88].'</option>';
        }

        $action_url = $this->mode == 'admin' ? 
                BLOG_ADMIN_URL . '/index.php' : 
                BLOG_URL . '/index.php';

        $T->set_var(array(
            'action_url'        => $action_url,
            'hour_mode'         => $_CONF['hour_mode'],
            'story_author'      => $storyauthor,
            'story_author_select' => $storyauthor_select,
            'author'            => $storyauthor,
            'story_uid'         => $this->uid,
            'owner_username'    => DB_getItem($_TABLES['users'], 'username', 
                                    'uid = ' . $this->owner_id),
            'owner_name'        => $ownername,
            'owner'             => $ownername,
            'owner_id'          => $this->owner_id,
            'permissions_editor' => SEC_getPermissionsHTML(
                    $this->perm_owner, $this->perm_group,
                    $this->perm_members, $this->perm_anon),
            'permissions_msg'   => $LANG_ACCESS['permmsg'],
            'publish_second'    => date('s', $this->date),
            'publishampm_selection' => COM_getAmPmFormSelection('publish_ampm', 
                                    $pub_ampm),
            'publish_month_options' => $pub_opt['month_options'],
            'publish_day_options'   => $pub_opt['day_options'],
            'publish_year_options'  => $pub_opt['year_options'],
            'publish_hour_options'  => $pub_opt['hour_options'],
            'publish_minute_options' => $pub_opt['minute_options'],
            /*'publish_month_options' => COM_getMonthFormOptions($pub_month),
            'publish_day_options'   => COM_getDayFormOptions($pub_day),
            'publish_year_options'  => COM_getYearFormOptions($pub_year),
            'publish_hour_options'  => $pub_hour_options,
            'publish_minute_options' => COM_getMinuteFormOptions($pub_minute),*/
            'story_unixstamp'   => strtotime($this->_date),
            'expireampm_selection'  => $exp_opt['ampm_select'],
            'expire_month_options'  => $exp_opt['month_options'],
            'expire_day_options'    => $exp_opt['day_options'],
            'expire_year_options'   => $exp_opt['year_options'],
            'expire_hour_options'   => $exp_opt['hour_options'],
            'expire_minute_options' => $exp_opt['minute_options'],
            /*'expire_second'     => date('s', $this->expire),
            'expireampm_selection'  => $exp_ampm_select,
            'expire_month_options'  => COM_getMonthFormOptions($exp_month),
            'expire_day_options'    => COM_getDayFormOptions($exp_day),
            'expire_year_options'   => COM_getYearFormOptions($exp_year),
            'expire_hour_options'  => $exp_hour_options,
            'expire_minute_options' => COM_getMinuteFormOptions($exp_minute),*/
            'story_title'       => $this->title,
            'topic_options'     => $allowedTopicList,
            'show_topic_icon_checked' => $this->show_topic_icon == 1 ?
                                 BLOG_CHECKED : '',
            'is_checked'        =>$this->draft_flag ? BLOG_CHECKED : '',
            'status_options'    => COM_optionList($_TABLES['statuscodes'], 
                                'code,name', $this->statuscode),
            'comment_options'   => COM_optionList($_TABLES['commentcodes'], 
                                'code,name', $this->commentcode),
            'trackback_options' => COM_optionList($_TABLES['trackbackcodes'],
                                'code,name', $this->trackbackcode),
            /*'cmt_close_month_options'   => COM_getMonthFormOptions($cmt_month),
            'cmt_close_day_options'     => COM_getDayFormOptions($cmt_day),
            'cmt_close_year_options'    => COM_getYearFormOptions($cmt_year),
            'cmt_close_ampm_selection'  => $cmt_ampm_select,
            'cmt_close_hour_options'    => $cmt_hour_options,
            'cmt_close_minute_options'  => COM_getMinuteFormOptions($cmt_minute),
            'cmt_close_second_options'  => COM_getMinuteFormOptions($cmt_second),*/
            'cmt_close_month_options'   => $cmt_opt['month_options'],
            'cmt_close_day_options'     => $cmt_opt['day_options'],
            'cmt_close_year_options'    => $cmt_opt['year_options'],
            'cmt_close_ampm_selection'  => $cmt_opt['ampm_select'],
            'cmt_close_hour_options'    => $cmt_opt['hour_options'],
            'cmt_close_minute_options'  => $cmt_opt['minute_options'],
            'cmt_close_second_options'  => $cmt_opt['second_options'],
            'featured_options'  => $featured_options,
            'frontpage_options' => COM_optionList($_TABLES['frontpagecodes'], 
                                'code,name', $this->frontpage),
            'story_introtext'   => $this->_editText($this->introtext),
            'story_bodytext'    => $this->_editText($this->bodytext),
            'no_javascript_return_link' => sprintf($LANG24[78],
                                    $_CONF['site_admin_url'], $sid),
            'post_options'      => $post_options,
            'lang_allowed_html' => COM_allowedHTML(),
            'story_hits'        => $this->hits,
            'story_comments'    => $this->comments,
            'story_trackbacks'  => $this->trackbacks,
            'story_emails'      => $this->numemails,
            'story_id'          => $this->sid,
            'old_story_id'      => $this->sid,
            'lang_save'         => $lang_saveoption,
            'saveoption'        => $saveoption,
            'gltoken_name'      => CSRF_TOKEN,
            'gltoken'           => SEC_createToken(),

            // Language strings - TODO: move to template
            'lang_preview'      => $LANG_ADMIN['preview'],
            'lang_cancel'       => $LANG_ADMIN['cancel'],
            'lang_delete'       => $LANG_ADMIN['delete'],
            'lang_sid'          => $LANG24[12],
            'lang_emails'       => $LANG24[39],
            'lang_trackbacks'   => $LANG24[29],
            'lang_comments'     => $LANG24[19],
            'lang_author'       => $LANG24[7],
            'lang_accessrights' => $LANG_ACCESS['accessrights'],
            'lang_owner'        => $LANG_ACCESS['owner'],
            'lang_group'        => $LANG_ACCESS['group'],
            'lang_permissions'  => $LANG_ACCESS['permissions'],
            'lang_perm_key'     => $LANG_ACCESS['permissionskey'],
            'lang_date'         => $LANG24[15],
            'publish_date_explanation' => $LANG24[46],
            'expire_date_explanation' => $LANG24[46],
            'lang_archivetitle' => $LANG24[58],
            'lang_option'       => $LANG24[59],
            'lang_enabled'      => $LANG_ADMIN['enabled'],
            'lang_story_stats'  => $LANG24[87],
            'lang_optionarchive' => $LANG24[61],
            'lang_optiondelete' => $LANG24[62],
            'lang_title'        => $LANG_ADMIN['title'],
            'lang_topic'        => $LANG_ADMIN['topic'],
            'lang_show_topic_icon' => $LANG24[56],
            'lang_draft'        => $LANG24[34],
            'lang_mode'         => $LANG24[3],
            'lang_cmt_disable'  => $LANG24[63],
            'lang_introtext'    => $LANG24[16],
            'lang_bodytext'     => $LANG24[17],
            'lang_postmode'     => $LANG24[4],
            'lang_publishoptions' => $LANG24[76],
            'lang_nojavascript' => $LANG24[77],
            'lang_hits'         => $LANG24[18],
        ) );

        if ($this->advanced_editor_mode == 1 || 
                $this->postmode == 'adveditor' ||
                $this->postmode == 'plaintext') {
            $T->set_var('show_allowedhtml', 'none');
        } else {
            $T->set_var('show_allowedhtml', '');
        }

        if ($_CONF['rating_enabled']) {
            $T->set_var(array(
                'rating'    => @number_format($this->rating, 2),
                'votes'     => $this->votes,
            ) );
        }

        $fileinputs = '';
        $saved_images = '';
        if ($_BLOG_CONF['maximages'] > 0) {
            $T->set_var('lang_images', $LANG24[47]);
            $icount = DB_count($_TABLES['article_images'],'ai_sid', $this->sid);
            if ($icount > 0) {
                $result_blogs = DB_query("SELECT * 
                    FROM {$_TABLES['article_images']} 
                    WHERE ai_sid = '{$this->sid}'");
                for ($z = 1; $z <= $icount; $z++) {
                    $I = DB_fetchArray($result_blogs, false);
                    // TODO: should be a plugin-specific directory for images
                    // or remove this ability
                    $saved_images .= $z . ') '
                        . COM_createLink($I['ai_filename'],
                            $_CONF['site_url'] . '/images/articles/' . 
                                $I['ai_filename'])
                    . '&nbsp;&nbsp;&nbsp;' . $LANG_ADMIN['delete']
                    . ': <input type="checkbox" name="delete[' .$I['ai_img_num']
                    . ']"' . XHTML . '><br' . XHTML . '>';
                }
            }

            $newallowed = $_BLOG_CONF['maximages'] - $icount;
            for ($z = $icount + 1; $z <= $_BLOG_CONF['maximages']; $z++) {
                $fileinputs .= $z . ') <input type="file" dir="ltr" name="file[]'
                        . '"' . XHTML . '>';
                if ($z < $_BLOG_CONF['maximages']) {
                    $fileinputs .= '<br' . XHTML . '>';
                }
            }
            $fileinputs .= '<br' . XHTML . '>' . $LANG24[51];
            if ($_CONF['allow_user_scaling'] == 1) {
                $fileinputs .= $LANG24[27];
            }
            $fileinputs .= $LANG24[28] . '<br' . XHTML . '>';
        }

        $T->set_var(array(
            'saved_images'      => $saved_images,
            'image_form_elements' => $fileinputs,
        ) );

        if ($this->cmt_close) {
            $T->set_var('is_checked5', BLOG_CHECKED);
            $T->set_var('showcmtclosedisabled', 'false');
        } else {
            $T->set_var('showcmtclosedisabled', 'true');
        }

        switch ($this->statuscode) {
        case STORY_ARCHIVE_ON_EXPIRE:
            $T->set_var(array(
                'is_checked2'       => BLOG_CHECKED,
                'is_checked3'       => BLOG_CHECKED,
                'showarchivedisabled' => 'false',
            ) );
            break;
        case STORY_DELETE_ON_EXPIRE:
            $T->set_var(array(
                'is_checked2'       => BLOG_CHECKED,
                'is_checked4'       => BLOG_CHECKED,
                'showarchivedisabled' => 'false',
            ) );
            break;
        default:
            $T->set_var('showarchivedisabled', 'true');
            break;
        }

        if (SEC_hasRights('blog.edit')) {
            $T->set_var('owner_dropdown', COM_buildOwnerList('owner_id', 
                        $this->owner_id));
        } else {
            $ownerInfo = '<input type="hidden" name="owner_id" value="'.
                    $this->owner_id . '" />' . $ownername;
            $T->set_var('owner_dropdown', $ownerInfo);
        }

        if (SEC_inGroup($this->group_id)) {
            $T->set_var('group_dropdown',
                            SEC_getGroupDropdown($this->group_id, 3));
        } else {
            $gdrpdown = '<input type="hidden" name="group_id" value="' .
                    $this->group_id . '"/>';
            $grpddown .= DB_getItem($_TABLES['groups'],'grp_name',
                    'grp_id=' . $this->group_id);
            $T->set_var('group_dropdown', $grpddown);
        }

        $T->parse('output', 'editor');
        $retval .= $T->finish($T->get_var('output'));
        //$retval .= COM_endBlock(COM_getBlockTemplate('_admin_block', 'footer'));
        return $retval;

    }   // function Edit()


    /**
    *   Return a topic ID.
    *   May return the ID provided, or will look for a default topic or
    *   any topic that that the user is allowed to access
    *
    *   @param  string  $tid    Topic ID (optional)
    *   @return string          Provided ID, or one from the database
    */
    function getTopic($tid = '')
    {
        global $_TABLES;

        // If a topic id is provided, just return it
        if (!empty($tid)) return $tid;

        // Second choice, get the default topic
        $tid =  DB_getItem($_TABLES['topics'], 'tid',
                        'is_default = 1' . COM_getPermSQL('AND'));

        // Final choice, get any topic that the user has access to
        if (empty($tid)) {
            $tid = DB_getItem($_TABLES['topics'], 'tid', COM_getPermSQL('AND'));
        }

        return $tid;
    }


    /**
    *   Extract links from an HTML-formatted text.
    *
    *   Collects all the links in a story and returns them in an array.
    *
    *   @param    int     $maxlength  max. length of text in a link (can be 0)
    *   @return   array   an array of strings of form <a href="...">link</a>
    */
    function extractLinks($maxlength = 26)
    {
        $rel = array();
        $fulltext = $this->introtext . ' ' . $this->bodytext;

        // Only match anchor tags that contain 'href="<something>"'
        preg_match_all( "/<a[^>]*href=[\"']([^\"']*)[\"'][^>]*>(.*?)<\/a>/i", 
            $fulltext, $matches );

        for ($i = 0; $i < count($matches[0]); $i++) {
            $matches[2][$i] = strip_tags($matches[2][$i]);
            if (!MBYTE_strlen(trim($matches[2][$i]))) {
                $matches[2][$i] = strip_tags($matches[1][$i]);
            }

            // if link is too long, shorten it and add ... at the end
            if ($maxlength > 0 && MBYTE_strlen($matches[2][$i]) > $maxlength) {
                $matches[2][$i] = substr($matches[2][$i], 0, $maxlength - 3) . 
                    '...';
            }

            $rel[] = '<a href="' . $matches[1][$i] . '">'
                   . str_replace(array("\015", "\012"), '', $matches[2][$i])
                   . '</a>';
        }

        return $rel;
    }


    /**
    *   Save a blog.
    *
    *   @param  array   $A      Array of data, e.g. $_POST
    *   @return boolean         True on success, False on failure
    */
    function Save($A = array())
    {
        global $_TABLES, $_CONF, $_BLOG_CONF;

        if (!empty($A)) {
            // Set all variables from $A, including updating the SID
            $this->setVars($A);
            if (isset($A['old_sid']) && !empty($A['old_sid']))
                $this->originalSid = $A['old_sid'];
            else
                $this->originalSid = $this->sid;
        }

        $newSid = DB_escapeString($this->sid);
        if (!$this->isNew) {
            $oldSid = DB_escapeString($this->originalSid);
            $sql1 = "UPDATE {$_TABLES['blogs']} SET ";
            $sql3 = " WHERE sid='{$oldSid}'";
        } else {
            $this->originalSid = $this->sid;
            if (empty($newSid)) $newSid = COM_makeSid();
            $sql1 = "INSERT INTO {$_TABLES['blogs']} SET ";
            $sql3 = '';

            // Clear variables that aren't set for new items
            $this->hits = 0;
            $this->votes = 0;
            $this->numemails = 0;
            $this->comments = 0;
            $this->trackbacks = 0;
            $this->rating = 0;
        }

        // Check for uploaded images to process
        if (count($_FILES) && $_BLOG_CONF['maximages'] > 0) {
            USES_blog_class_blogimage();
            $Image = new BlogImage($this->sid);
            $Image->uploadFiles();
            // TODO - error checking needed?
        }

        if (DB_getItem($_TABLES['topics'], 'tid', 
                    'archive_flag=1') == $this->_tid) {
            $this->featured = 0;
            $this->frontpage = 0;
            $this->statuscode = STORY_ARCHIVE_ON_EXPIRE;
        }

        // If a featured, non-draft, that goes live straight away, unfeature
        // other stories in same topic:
        if ($this->featured == '1') {
            // there can only be one non-draft featured story
            if ($this->draft_flag == 0 AND $this->date <= time()) {

                if ($this->frontpage == 1) {
                    // un-feature any featured frontpage story
                    DB_query("UPDATE {$_TABLES['blogs']} 
                            SET featured = 0 
                            WHERE featured = 1 
                            AND draft_flag = 0 
                            AND frontpage = 1 
                            AND date <= NOW()");
                }

                // un-feature any featured story in the same topic
                DB_query("UPDATE {$_TABLES['blogs']} 
                        SET featured = 0 
                        WHERE featured = 1 
                        AND draft_flag = 0 
                        AND tid = '{$this->tid}' 
                        AND date <= NOW()");
            }
        }

        // Replace [imageX] tags in the story with actual image urls
        $this->insertImages();

        // If the new SID is different than the original, and if the
        // blog already exists in the database, then we have to update all 
        // the related tables with the new SID.
        if ($this->sid != $this->originalSid && !$this->isNew) {

            // If we've changed the SID, make sure the new one doesn't already
            // exist.  If it does, change it.  More elegant handling to follow
            $x = DB_count($_TABLES['blogs'], 'sid', $newSid);
            if ($x > 0) {
                $this->sid = COM_makeSid();
                $newSid = DB_escapeString($this->sid);
            }

            // Move Comments
            $sql = "UPDATE {$_TABLES['comments']} 
                    SET sid='$newSid'
                    WHERE type='{$_BLOG_CONF['pi_name']}'
                    AND sid='$checksid'";
            DB_query($sql);

            // Move Images
            $sql = "UPDATE {$_TABLES['article_images']} 
                    SET ai_sid = '{$newSsid}' 
                    WHERE ai_sid = '{$oldSid}'";
            DB_query($sql);

            // Move trackbacks
            $sql = "UPDATE {$_TABLES['trackback']} 
                    SET sid='{$newSid}' 
                    WHERE sid='{$oldSid}' 
                    AND type='{$_BLOG_CONF['pi_name']}'";
            DB_query($sql);

            // Move ratings
            $sql = "UPDATE {$_TABLES['rating']} 
                        SET item_id='{$newSid}' 
                        WHERE item_id='{$oldSid}'
                        AND type='{$_BLOG_CONF['pi_name']}'";
            DB_query($sql);
            $sql = "UPDATE {$_TABLES['rating_votes']} 
                        SET item_id='{$newSid}' 
                        WHERE item_id='{$oldSidid}' 
                        AND type='{$_BLOG_CONF['pi_name']}'";
            DB_query($sql);

            CACHE_remove_instance('blog_'.$this->originalSid);
        }

        // Acquire Comment Count
        $this->comments = DB_count($_TABLES['comments'],
                array('type', 'sid'),
                array($_BLOG_CONF['pi_name'], $this->sid));

        // Acquire Rating / Votes
        list($rating_id, $rating, $votes) = 
                RATING_getRating($_BLOG_CONF['pi_name'], $this->sid);
        $this->rating = $rating;
        $this->votes = $votes;

        // Get the related URLs
        $this->related = implode("\n", $this->extractLinks());
        $sql2 = "sid = '$newSid',
            uid = {$this->uid},
            hits = {$this->hits},
            votes = {$this->votes},
            numemails = {$this->numemails},
            commentcode = {$this->commentcode},
            statuscode = {$this->statuscode},
            comments = {$this->comments},
            trackbacks = {$this->trackbacks},
            advanced_editor_mode = {$this->advanced_editor_mode},
            frontpage = {$this->frontpage},
            owner_id = {$this->owner_id},
            group_id = {$this->group_id},
            perm_owner = {$this->perm_owner},
            perm_group = {$this->perm_group},
            perm_members = {$this->perm_members},
            perm_anon = {$this->perm_anon},
            draft_flag = {$this->draft_flag},
            featured = {$this->featured},
            show_topic_icon = {$this->show_topic_icon},
            rating = {$this->rating},
            tid = '" . DB_escapeString($this->tid) . "',
            date = '" . DB_escapeString($this->date) . "',
            title = '" . DB_escapeString($this->title) . "',
            introtext = '" . DB_escapeString($this->introtext) . "',
            bodytext = '" . DB_escapeString($this->bodytext) . "',
            comment_expire = '" . DB_escapeString($this->comment_expire) . "',
            related = '" . DB_escapeString($this->related) . "',
            expire = '" . DB_escapeString($this->expire) . "',
            postmode = '" . DB_escapeString($this->postmode) . "'";

        //echo $sql1 . $sql2 . $sql3;die;
        DB_query($sql1 . $sql2 . $sql3, 1);
        if (DB_error()) {
            return false;
        } else {
            return true;
        }

    }   // function Save()


    /**
    *   Delete the current blog record
    */
    function Delete()
    {
        global $_TABLES, $_BLOG_CONF;

        if ($this->sid == '' || !$this->hasAccess(3)) return false;

        DB_delete($_TABLES['comments'], 
                array('sid', 'type'),
                array($this->sid, $_BLOG_CONF['pi_name']));
        DB_delete($_TABLES['trackbacks'], 
                array('sid', 'type'),
                array($this->sid, $_BLOG_CONF['pi_name']));
        DB_delete($_TABLES['blogs'], 
                array('sid', 'type'),
                array($this->sid, $_BLOG_CONF['pi_name']));

        PLG_itemDeleted($sid, 'blog');

        // update RSS feed and Older Stories block
        COM_rdfUpToDateCheck ();
        COM_olderStuff ();

    }   // function Delete()


    function Send($to, $toemail, $from, $fromemail, $msg)
    {
        global $_CONF, $_BLOG_CONF, $LANG_BLOG, $_TABLES, $_USER;
        global $LANG01, $LANG08;        // TODO: remove these

        USES_blog_class_blog();

        $blogUrl = COM_buildUrl(BLOG_URL . '/index.php?sid=' . $this->sid);
        if ($_CONF['url_rewrite']) {
            $retval = COM_refresh($blogUrl . '?msg=85');
        } else {
            $retval = COM_refresh($blogUrl . '&amp;msg=85');
        }

        // check for correct $_CONF permission
        if (COM_isAnonUser() && (($_CONF['loginrequired'] == 1) ||
                             ($_CONF['emailstoryloginrequired'] == 1))) {
            return $retval;
        }

        // check if emailing of stories is disabled
        if ($_CONF['hideemailicon'] == 1) {
            return $retval;
        }

        // check mail speedlimit
        COM_clearSpeedlimit ($_CONF['speedlimit'], 'mail');
        if (COM_checkSpeedlimit ('mail') > 0) {
            return $retval;
        }

        $mailtext = sprintf($LANG_BLOG['mail_txt'], $from, $fromemail) . LB;
        if (strlen($msg) > 0) {
            $shortmsg = COM_filterHTML($msg);
            $mailtext .= LB . sprintf($LANG_BLOG['user_wrote'], $from) . 
                    $shortmsg . LB;
        }

        // just to make sure this isn't an attempt at spamming users ...
        $result = PLG_checkforSpam($mailtext, $_CONF['spamx']);
        if ($result > 0) {
            COM_updateSpeedlimit ('mail');
            COM_displayMessageAndAbort ($result, 'spamx', 403, 'Forbidden');
        }

        $mailtext .= 
                '------------------------------------------------------------'
                . LB . LB
                . COM_undoSpecialChars($Blog->title) . LB
                . strftime($_CONF['date'], $this->ux_date) . LB;

        if ($_CONF['contributedbyline'] == 1) {
            $author = COM_getDisplayName($this->uid);
            $mailtext .= $LANG01[1] . ' ' . $author . LB;
        }

        $mailtext .= LB
        . COM_undoSpecialChars(strip_tags($this->DisplayElements('introtext')))
        . LB . LB
        . COM_undoSpecialChars(strip_tags($this->DisplayElements('bodytext')))
        . LB . LB
        . '------------------------------------------------------------' . LB;

        if ($Blog->commentcode == 0) { // comments allowed
            $mailtext .= $LANG08[24] . LB
            . COM_buildUrl(BLOG_URL . '/index.php?sid=' . $this->sid . 
                    '#comments');
        } else { // comments not allowed - just add the story's URL
            $mailtext .= $LANG08[33] . LB
            . COM_buildUrl(BLOG_URL . '/index.php?sid=' . $sid);
        }

        $mailto = COM_formatEmailAddress($to, $toemail);
        $mailfrom = COM_formatEmailAddress($from, $fromemail);
        $subject = COM_undoSpecialChars(strip_tags($this->title));

        $rc = COM_mail($mailto, $subject, $mailtext, $mailfrom, 0);
        COM_updateSpeedlimit('mail');

        if ($rc) {
            if ($_CONF['url_rewrite']) {
                $retval = COM_refresh($blogUrl . '?msg=27');
            } else {
                $retval = COM_refresh($blogUrl . '&amp;msg=27');
            }
        } else {
            // Increment numemails counter for story
            $Blog->IncrEmails();
            if ($_CONF['url_rewrite']) {
                $retval = COM_refresh($blogUrl . '?msg=26');
            } else {
                $retval = COM_refresh($blogUrl . '&amp;msg=26');
            }
        }
        return $retval;
    }


}   // class Blog

if (!function_exists('html_entity_decode')) {
    /**
     * html_entity_decode()
     *
     * Convert all HTML entities to their applicable characters
     * This function is a fallback if html_entity_decode isn't defined
     * in the PHP version used (i.e. PHP < 4.3.0).
     * Please note that this function doesn't support all parameters
     * of the original html_entity_decode function.
     *
     * Function borrowed from postnuke, under the GPL.
     *
     * @param  string $string the this function converts all HTML entities to their applicable characters from string.
     * @return the converted string
     * @link http://php.net/html_entity_decode The documentation of html_entity_decode
     **/
    function html_entity_decode($string)
    {
        $trans_tbl = get_html_translation_table(HTML_ENTITIES);
        $trans_tbl = array_flip($trans_tbl);
        return (strtr($string, $trans_tbl));
    }
}
?>
